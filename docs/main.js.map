{"version":3,"sources":["./src/app/animator/animator.component.ts","./src/app/animator/animator.component.html","./src/app/errorGenerator.ts","./src/environments/environment.ts","./src/app/code-output/code-output.component.ts","./src/app/code-output/code-output.component.html","./src/app/grapher/grapher.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/interfaces/grapherInterfaces.ts","./src/app/code-input/code-input.component.ts","./src/app/code-input/code-input.component.html","./src/app/interfaces/dynamicFunctionsInterfaces.ts","./src/app/animation-page/animation-page.component.ts","./src/app/animation-page/animation-page.component.html","./src/app/generator-page/generator-page.component.ts","./src/app/generator-page/generator-page.component.html","./src/app/app-routing.module.ts","./src/app/instructions-page/instructions-page.component.ts","./src/app/instructions-page/instructions-page.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoE;AACiB;;;;;ICczE,yEAaI;;IAAA,uEAAM;IAAA,uDAAc;IAAA,4DAAO;IAC/B,4DAAM;;;;;IATD,mGAAqC;IAJrC,oFAAwB;IACxB,qFAA6B;IAWxB,0DAAc;IAAd,8EAAc;;;;IAlBhC,yEAII;IAAA,sEACI;;IAAA,oHAcM;IACV,4DAAM;IACV,4DAAM;;;IAnBD,yKAAiD;IAE7C,0DAAmC;IAAnC,+IAAmC;IACd,0DAAU;IAAV,iFAAU;;;ADPrC,MAAM,iBAAiB;IAiE5B,YAAoB,KAAwB;QAAxB,UAAK,GAAL,KAAK,CAAmB;QAtDnC,4BAAuB,GAAW,KAAK,CAAC;QACxC,yBAAoB,GAAW,CAAC,GAAC,CAAC,GAAG,IAAI,CAAC,uBAAuB,CAAC;QAClE,sBAAiB,GAAW,CAAC,GAAC,CAAC,GAAG,IAAI,CAAC,uBAAuB,CAAC;QAExE,qBAAqB;QACrB,UAAK,GAAW,CAAC,CAAC;QAIlB,WAAM,GAAW,CAAC,CAAC;QACnB,WAAM,GAAW,CAAC,CAAC;QACnB,cAAS,GAAW,CAAC,CAAC;QACtB,cAAS,GAAW,CAAC,CAAC;QACb,cAAS,GAAW,IAAI,CAAC;QAElC,uCAAuC;QACvC,oBAAe,GAAW,CAAC,CAAC;QAC5B,sBAAiB,GAAW,EAAE,CAAC;QAKtB,eAAU,GAAW,EAAE,CAAC;QAEjC,wBAAwB;QACf,mBAAc,GAAW,CAAC,CAAC;QAC3B,mBAAc,GAAW,GAAG,CAAC;QAC7B,gBAAW,GAAW,CAAC,CAAC;QAEjC,oBAAoB;QACX,mBAAc,GAAW,EAAE,CAAC;QAC5B,kBAAa,GAAW,IAAI,CAAC,UAAU,CAAC;QA4DjD,iBAAY,GAAG,CAAC,YAAqB,EAAE,EAAE;YACvC,IAAI,IAAI,CAAC,aAAa,KAAK,8DAAa,CAAC,OAAO,EAAE;gBAChD,IAAI,CAAC,wBAAwB,EAAE,CAAC;aACjC;YACD,IAAI,YAAY,EAAE;gBAChB,IAAI,CAAC,WAAW,EAAE,CAAC;aACpB;YACD,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC;QAC7B,CAAC;IA7C+C,CAAC;IAnBjD,IACI,QAAQ,CAAC,KAAa;QACxB,IAAI,CAAC,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAC,oBAAoB,GAAG,GAAG,CAAC;QACxD,IAAI,CAAC,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC,iBAAiB,GAAG,GAAG,CAAC;IACpD,CAAC;IAED,IACI,UAAU,CAAC,OAAgB;QAC7B,IAAG,CAAC,OAAO;YAAE,OAAO;QACpB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAChC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QACrC,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAC;QAChD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC;QAEvC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC;QAC3B,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAID,UAAU;QACR,IAAI,CAAC,2BAA2B,EAAE,CAAC;QAEnC,kDAAkD;QAClD,yBAAyB;QACzB,QAAO,IAAI,CAAC,aAAa,EAAE;YACzB,KAAK,8DAAa,CAAC,OAAO;gBACxB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC;gBACxC,IAAI,CAAC,wBAAwB,EAAE,CAAC;gBAChC,MAAM;YAER,KAAK,8DAAa,CAAC,IAAI;gBACrB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;gBAC3C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC;gBACtC,MAAM;SACT;QACD,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED,2BAA2B;QACzB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACvB,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;SAC1D;IACH,CAAC;IAED,wBAAwB;QACtB,0DAA0D;QAC1D,sBAAsB;QACtB,uDAAuD;QACvD,2BAA2B;QAC3B,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,CAAC;IAC9C,CAAC;IAYD,mBAAmB;QACjB,sDAAsD;QACtD,kBAAkB;QAClB,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAa,CAAC;QAC9D,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC;QACnC,QAAQ,GAAG,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;QACzC,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;QAC/C,MAAM,WAAW,GAAG,QAAQ,GAAG,QAAQ,CAAC;QAExC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CACxB,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,KAAe,GAAG,QAAQ,CAAC,GAAG,WAAW,GAAG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAC1G,CAAC;IACJ,CAAC;IAED,WAAW;QACT,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC9B,CAAC;IAED,kBAAkB;QAChB,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QACtC,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,GAAG,WAAW,GAAG,IAAI,CAAC,eAAe,GAAG,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;QAC5F,MAAM,cAAc,GAAG,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3G,IAAI,CAAC,eAAe,GAAG,CAAC,cAAc,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;QACzD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,SAAS,EAAE,EAAE,CACrC,IAAI,CAAC,IAAI,GAAG,SAAS,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,eAAe,CACxF,CAAC;IACJ,CAAC;IAED,oBAAoB;QAClB,MAAM,eAAe,GAAG,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,IAAI,CAAC,iBAAiB,GAAG,CAAC,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;IACpE,CAAC;IAED,gBAAgB,CAAC,IAAmB;QAClC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAC3B,CAAC;IAED,eAAe,CAAC,IAAmB;QACjC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAC3B,CAAC;IAED,SAAS,CAAC,IAAmB,EAAE,cAAsB;QACnD,MAAM,UAAU,GAAG,GAAG,CAAC;QACvB,MAAM,WAAW,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,UAAU,GAAG,cAAc,CAAC;QAC3F,IAAI,CAAC,IAAI,IAAI,WAAW,CAAC;IAC3B,CAAC;IAED,cAAc,CAAC,KAAiB;QAC9B,IAAI,CAAC,IAAI,CAAC,aAAa;YAAE,OAAO;QAChC,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC;IAED,gBAAgB,CAAC,EAAC,MAAM,EAAM;QAC5B,OAAO,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC;IAED,WAAW,CAAC,EAAC,MAAM,EAAM;QACvB,MAAM,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC,EAAC,MAAM,EAAC,CAAC,GAAG,GAAG,CAAC;QAC7D,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,GAAG,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC;QACrE,IAAI,CAAC,eAAe,EAAE;YACpB,IAAI,CAAC,KAAK,IAAI,cAAc,CAAC;SAC9B;QACD,OAAO,CAAC,eAAe,CAAC;IAC1B,CAAC;IAED,kBAAkB,CAAC,OAAoB,EAAE,QAAgB,EAAE,KAAa;QACtE,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,EAAE,KAAK,GAAG,IAAI,CAAC,CAAC;IACpD,CAAC;IAED,UAAU,CAAC,KAAiB;QAC1B,IAAI,CAAC,IAAI,CAAC,OAAO;YAAE,OAAO;QAE1B,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;YAC1C,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;YAC1C,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,aAAa,EAAE,aAAa,EAAE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;YACzF,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,aAAa,EAAE,YAAY,EAAE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;SACzF;IACH,CAAC;IAED,WAAW,CAAC,UAAmB,EAAE,QAAoB,IAAI;QACvD,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;QAC3B,IAAI,UAAU,EAAE;YACd,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC;YACzB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC;SAC1B;aAAM;YACL,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC;YAC9B,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC;SAC/B;IACH,CAAC;;kFA5MU,iBAAiB;iGAAjB,iBAAiB;QCP9B,yEAQI;QANA,sJAAc,0BAAsB,IAAC,4FACxB,gBAAY,IAAI,SAAS,IADD,4FAExB,sBAAkB,IAFM,kFAG1B,gBAAY,KAAK,CAAC,IAHQ;QAMrC,yEAAmB;QAAA,qEAAU;QAAA,oEAAG;QAAA,uDAAS;QAAA,4DAAI;QAAA,4DAAM;QACnD,6GAqBM;QACV,4DAAM;;QA/BD,4KAC0C;QAOX,0DAAS;QAAT,0EAAS;QACnC,0DAAa;QAAb,6EAAa;;6FDFV,iBAAiB;cAL7B,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,2BAA2B;gBACxC,SAAS,EAAE,CAAC,2BAA2B,CAAC;aACzC;+GA6CU,KAAK;kBAAb,mDAAK;YAGF,QAAQ;kBADX,mDAAK;YAOF,UAAU;kBADb,mDAAK;;;;;;;;;;;;;;AE5DR;AAAA;AAAA;AAAA;AAAA;AAAA,IAAI,YAA4B,CAAC;AAEjC,SAAS,UAAU,CAAC,KAAa,EAAE,WAAmB;IAClD,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,EAAE,wBAAwB,CAAC,CAAC;IACrE,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,GAAG,OAAO,KAAK,cAAc,WAAW,EAAE,CAAC;AAClF,CAAC;AAED,SAAS,gBAAgB,CAAC,WAAmB;IACzC,UAAU,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;AAC5C,CAAC;AAED,SAAS,iBAAiB,CAAC,WAAmB;IAC1C,UAAU,CAAC,6BAA6B,EAAE,WAAW,CAAC,CAAC;AAC3D,CAAC;AAED,SAAS,gBAAgB,CAAC,sBAA8B;IACpD,MAAM,KAAK,GAAG,WAAW,CAAC,iCAAiC,EAAE,sBAAsB,CAAC,CAAC;IACrF,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IACjC,UAAU,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;AACzC,CAAC;AAED,SAAS,WAAW,CAAC,KAAa,EAAE,OAAe;IAC/C,IAAI,YAAY,EAAE;QACd,kBAAkB,EAAE,CAAC;KACxB;IACD,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAC7C,YAAY,CAAC,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAC;IACxC,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACpC,MAAM,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IACrD,WAAW,CAAC,OAAO,GAAG,kBAAkB,CAAC;IACzC,WAAW,CAAC,SAAS,GAAG,GAAG,CAAC;IAC5B,YAAY,CAAC,SAAS,GAAG;cACf,KAAK;eACJ,OAAO;KACjB;IACD,YAAY,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;IACtC,OAAO,YAAY,CAAC;AACxB,CAAC;AAED,SAAS,kBAAkB;IACvB,IAAG,CAAC,YAAY;QAAE,OAAO;IACzB,YAAY,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;IAClD,YAAY,GAAG,IAAI,CAAC;AACxB,CAAC;AAOA;;;;;;;;;;;;;AClDD;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACdnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiG;AAEc;AAClE;AAC2B;;;;;;;;;ICChE,4EAMA;IAFI,meAAgD,GAAG,sBAAe;IAJtE,4DAMA;;;;;IALI,uFAA0B;IAC1B,sFAA6B;;;;IANrC,sEAII;IAAA,gIAMA;IAAA,6EAGI;IAHI,8XAA2C;IAG/C,uDACJ;IAAA,4DAAS;IACb,4DAAM;;;;;IAbD,kGAA0C;IAElB,0DAAoB;IAApB,uFAAoB;IAOrC,0DAAmD;IAAnD,sHAAmD;IAEvD,0DACJ;IADI,4FACJ;;;IAfR,0EACI;IAAA,qHAeM;IACV,4DAAM;;;IAhBwB,0DACrB;IADqB,yFACrB;;;IAmBD,yEAOM;;;;;;IALD,6GAA6C;IAG7C,kMAAqC;IAFrC,0FAAiC;;;IAJ1C,wEACI;IAAA,+HAOM;IACV,qEAAe;;;;IARL,0DAA0G;IAA1G,0RAA0G;;;;IAgChH,6EAGI;IADI,mUAA0B;IAC9B,kEACJ;IAAA,4DAAS;;;IAHD,gHAAyC;;;IAQ7C,wEACI;IAAA,qEACJ;IAAA,qEAAe;;;IAEX,qEACJ;;;;IARJ,0EAGI;IADC,0TAAuB;IACxB,yIAEe;IACf,mNAEc;IAClB,4DAAM;;;;IANa,0DAAyB;IAAzB,0FAAyB;;ADnD7C,MAAM,mBAAmB;IA0B9B;QArBS,UAAK,GAAW,IAAI,CAAC;QACrB,YAAO,GAAY;YACxB,KAAK,EAAE,GAAG;YACV,IAAI,EAAE,IAAI;SACb,CAAC;QAEO,mCAA8B,GAAG,GAAG,CAAC;QAQ9C,wBAAmB,GAAY,KAAK,CAAC;QACrC,sBAAiB,GAAY,KAAK,CAAC;QAmKnC,qBAAgB,GAAG,CAAC,SAAoB,EAAE,EAAE;YAC1C,IAAI,eAAuB,CAAC;YAE5B,IAAI,IAAI,CAAC,iBAAiB,EAAE;gBAC1B,wCAAwC;gBACxC,eAAe,GAAG,IAAI,CAAC,8BAA8B,CAAC;aACvD;iBAAM;gBACL,0CAA0C;gBAC1C,IAAI,IAAI,GAAG,SAAS,CAAC,IAAI,EAAE,CAAC;gBAC5B,IAAI,IAAI,CAAC,IAAI,EAAE;oBACb,oBAAoB;oBACpB,IAAI,CAAC,cAAc,EAAE,CAAC;oBACtB,OAAO;iBACR;gBACD,IAAI;oBACF,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBAChC;gBAAC,OAAO,KAAK,EAAE;oBACd,yEAAiB,CAAC,KAAK,CAAC,CAAC;oBACzB,IAAI,CAAC,cAAc,EAAE,CAAC;oBACtB,OAAO;iBACR;gBACD,eAAe,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;aAC9D;YAED,8DAA8D;YAC9D,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,gBAAgB,EAAE,eAAe,EAAE,SAAS,CAAC,CAAC;QACjF,CAAC;IAvLe,CAAC;IAEjB,IACI,SAAS,CAAC,MAAuB;QACnC,IAAG,CAAC,MAAM;YAAE,OAAO;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,cAAc,EAAE,CAAC;QAEtB,6CAA6C;QAC7C,IAAI;YACF,IAAI,QAAQ,CAAC,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC7E;QAAC,OAAM,KAAK,EAAE;YACb,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACnB,MAAM,WAAW,GAAG;;;;;UAKhB,KAAK,EAAE,CAAC;YACZ,wEAAgB,CAAC,WAAW,CAAC,CAAC;SAC/B;IACH,CAAC;IAED,kBAAkB;QAChB,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;IACpC,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;QAC/B,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;QACjC,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC7B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QAChC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC/B,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QAChC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC/C,CAAC;IAED,WAAW;QACT,IAAI,CAAC,iBAAiB,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC;IACnD,CAAC;IAED,iBAAiB;QACf,MAAM,EACJ,aAAa,EACb,QAAQ,EACR,aAAa,EACd,GAAG,IAAI,CAAC,MAAM,CAAC;QAChB,IAAI,CAAC,OAAO,GAAG,IAAI,wDAAO,CAAC,QAAQ,EAAE,aAAa,EAAE,aAAa,CAAC,CAAC;QACnE,IAAI,CAAC,6BAA6B,EAAE,CAAC;IACvC,CAAC;IAED,wDAAwD;IACxD,YAAY,CAAC,IAAY;QACvB,OAAO,QAAQ,IAAI,uCAAuC,CAAC;IAC7D,CAAC;IAED,6BAA6B;QAC3B,MAAM,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;QAC9C,IAAI,CAAC,aAAa,GAAG,IAAI,QAAQ,CAAC,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAChG,CAAC;IAED,aAAa,CAAC,IAAS;;QACrB,IAAI,CAAC,WAAW,SAAG,IAAI,CAAC,IAAI,mCAAI,IAAI,CAAC;QAErC,sCAAsC;QACtC,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC;QACvE,IAAI,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,UAAU,CAAC,CAAC;QAClE,IAAI;YACF,IAAI,CAAC,cAAc,SAAG,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,OAAO,mCAAI,eAAe,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC;SACtF;QAAC,OAAM,KAAK,EAAE;YACb,MAAM,QAAQ,UAAU,0CAA0C,CAAC;SACpE;IACH,CAAC;IAEA,kBAAkB,CAAC,aAAqB;QACvC,MAAM,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC;QACxD,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QAClD,MAAM,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;QACvD,IAAI,CAAC,mBAAmB,GAAG,YAAY,CAAC,IAAI,CAAC;QAC7C,IAAI,CAAC,qBAAqB,GAAG,YAAY,CAAC,KAAK,CAAC;QAChD,IAAI,CAAC,gBAAgB,GAAG,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC1D,CAAC;IAED,oBAAoB,CAAC,aAAqB;QACxC,MAAM,gBAAgB,GAAG,QAAQ,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;QACnE,OAAO,gBAAgB,CAAC,gBAAgB,CAAC,yBAAyB,aAAa,YAAY,CAAQ,CAAC;IACtG,CAAC;IAED,eAAe,CAAC,MAA0B;QACxC,OAAO,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YAC7B,IAAI,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;YACxB,QAAO,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE;gBACzB,KAAK,gFAAS,CAAC,MAAM;oBACnB,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;gBAEvB,KAAK,gFAAS,CAAC,UAAU;oBACvB,OAAO,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBAEtC,KAAK,gFAAS,CAAC,MAAM;oBACnB,OAAO,KAAK,CAAC;gBAEf,KAAK,gFAAS,CAAC,UAAU;oBACvB,OAAO,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;aAC3B;QACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACR,CAAC;IAED,sBAAsB,CAAC,aAAqB;QAC1C,MAAM,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAQ,CAAC;QAC/D,OAAO,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;IAClE,CAAC;IAED,YAAY,CAAC,KAAuB;QAClC,IAAI,KAAa,CAAC;QAClB,MAAM,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;QACpC,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;QAE1B,IAAI,KAAK,KAAK,EAAE;YAAE,OAAO,KAAK,CAAC;QAE/B,QAAQ,QAAQ,EAAE;YAChB,KAAK,gFAAS,CAAC,MAAM;gBACnB,KAAK,GAAG,8EAAO,CAAC,SAAS,CAAC;gBAC5B,MAAM;YAEN,KAAK,gFAAS,CAAC,UAAU;gBACvB,KAAK,GAAG,8EAAO,CAAC,gBAAgB,CAAC;gBACnC,MAAM;YAEN,KAAK,gFAAS,CAAC,MAAM,CAAC;YACtB,KAAK,gFAAS,CAAC,UAAU;gBACvB,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;IAED,mBAAmB,CAAC,KAAa,EAAE,OAAyB;QAC1D,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC5B,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAClC,IAAG,OAAO,EAAE;YACV,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;SACnC;aAAM;YACL,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;SAChC;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;;sFArLU,mBAAmB;mGAAnB,mBAAmB;6EAGH,wDAAU;;;;;;;QCdvC,+GAiBM;QAEN,yEACI;QAAA,iIASe;QACnB,4DAAM;QAEN,yEAAoG;QAEpG,yEACI;QAAA,uDACJ;QAAA,4DAAM;QAEN,yEACI;QAAA,sEACI;QAAA,uEACI;QAAA,8EACJ;QAAA,4DAAO;QACP,iFACI;QAAA,wDACJ;QAAA,4DAAO;QACP,+EAIa;QAGb,uHAIS;QAET,kHASM;QAEN,8EAEI;QAFyB,4IAAS,oBAAgB,IAAC;QAEnD,mEACJ;QAAA,4DAAS;QACb,4DAAM;QACV,4DAAM;;;QA3EoB,mFAAmB;QAoBH,0DAAoC;QAApC,mIAAoC;QAYpE,0DAAsB;QAAtB,mFAAsB;QAG5B,0DACJ;QADI,qGACJ;QAQY,0DACJ;QADI,qFACJ;QAGY,0DAAe;QAAf,4EAAe;QAKlB,0DAA0B;QAA1B,0FAA0B;QAM7B,0DAAyB;QAAzB,yFAAyB;QAWvB,0DAAoB;QAApB,iFAAoB;;6FD3DvB,mBAAmB;cAL/B,uDAAS;eAAC;gBACT,QAAQ,EAAE,aAAa;gBACvB,WAAW,EAAE,8BAA8B;gBAC3C,SAAS,EAAE,CAAC,8BAA8B,CAAC;aAC5C;sCAGkC,gBAAgB;kBAAhD,0DAAY;mBAAC,iBAAiB;YACS,KAAK;kBAA5C,uDAAS;mBAAC,OAAO,EAAE,EAAC,IAAI,EAAE,wDAAU,EAAC;YA0BlC,SAAS;kBADZ,mDAAK;;;;;;;;;;;;;;;;;;;;;;;;;AEvCR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsD;AAC8C;AAGpG,SAAS,wBAAwB,CAAC,aAA4B;IAC1D,QAAO,aAAa,EAAE;QAClB,KAAK,2EAAa,CAAC,OAAO,CAAC,CAAC,OAAO,sEAAQ,CAAC,GAAG,CAAC;QAChD,KAAK,2EAAa,CAAC,IAAI,CAAC,CAAC,OAAO,sEAAQ,CAAC,MAAM,CAAC;KACnD;AACL,CAAC;AAED,MAAM,OAAO;IAWT,YACI,QAAmB,EACnB,aAA6B,EAC7B,aAA2B;QAVvB,cAAS,GAAW,CAAC,CAAC;QAEb,cAAS,GAAG,oCAAoC,CAAC;QACjD,sBAAiB,GAAG,SAAS,CAAC;QAC9B,uBAAkB,GAAG,SAAS,CAAC;QAC/B,uBAAkB,GAAG,SAAS,CAAC;QAahD,aAAQ,GAAG,CAAC,KAAgB,EAAiB,EAAE;YAC3C,OAAO;gBACH,EAAE,EAAE,IAAI,CAAC,SAAS,EAAE;gBACpB,KAAK,EAAE,KAAK;gBACZ,MAAM,EAAE,IAAI;gBACZ,IAAI,EAAE,IAAI;gBACV,QAAQ,EAAE,IAAI,CAAC,iBAAiB;aACnC;QACL,CAAC;QAdG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAC5B,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;QACtC,aAAa,GAAG,aAAa,IAAI,EAAE,CAAC;QACpC,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;IACxD,CAAC;IAYD,YAAY,CAAC,QAA2B;QACpC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAED,YAAY,CAAC,QAAkB;QAC3B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAED,YAAY;QACR,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAED,QAAQ;QACJ,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAED,mBAAmB,CAAC,KAAa;QAC7B,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC;IAC5C,CAAC;IAED,mBAAmB,CAAC,KAAa;QAC7B,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC;IAC5C,CAAC;IAED,eAAe,CAAC,KAAa;QACzB,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC;IAC3C,CAAC;IAED,iBAAiB,CAAC,KAAa,EAAE,QAAgB;QAC7C,8CAA8C;QAC9C,2CAA2C;QAC3C,iDAAiD;QACjD,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;YAC3B,QAAQ,GAAG,GAAG,GAAG,QAAQ,CAAC;SAC7B;QACD,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YAChC,yEAAiB,CAAC,qBAAqB,CAAC,CAAC;SAC5C;QACD,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAED,iBAAiB,CAAC,aAA4B;QAC1C,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IACvC,CAAC;IAED,gBAAgB;QACZ,OAAO,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;IAED,SAAS;QACL,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9C,CAAC;IAED,kBAAkB,CAAC,KAAa;QAC5B,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACpD,MAAM,SAAS,GAAG,YAAY,CAAC,KAAK,CAAC;QACrC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,SAAS,EAAE,EAAE;YACnC,IAAI,SAAS,GAAG,KAAK,EAAE;gBACnB,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;aACxC;iBAAM;gBACH,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;aACvC;QACL,CAAC,CAAC,CAAC;QACH,OAAO,SAAS,CAAC;IACrB,CAAC;IAED,eAAe,CAAC,KAAa,EAAE,KAAgB;QAC3C,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,SAAS,EAAE,EAAE;YACnC,IAAI,SAAS,GAAG,KAAK,EAAE;gBACnB,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;aACvC;iBAAM;gBACH,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;aACxC;QACL,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;IACzC,CAAC;IAED,IAAI,CAAC,MAAc,EAAE,MAAc;QAC/B,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;QACpF,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC;QACxG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC;IAED,YAAY,CAAC,eAAwB,KAAK;QACtC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;IAC7C,CAAC;IAED,YAAY,CAAC,MAAmB;QAC5B,OAAM,MAAM,CAAC,MAAM,GAAG,CAAC,EAAC;YACpB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;SAC7B;IACL,CAAC;IAED,KAAK;QACD,OAAM,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAC;YACxB,IAAI,CAAC,GAAG,EAAE,CAAC;SACd;IACL,CAAC;IAED,IAAI,CAAC,KAAgB;QACjB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAC/C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC;IAED,GAAG;QACC,MAAM,gBAAgB,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACxE,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,OAAO,gBAAgB,CAAC;IAC5B,CAAC;IAED,OAAO,CAAC,KAAgB;QACpB,IAAI,CAAC,eAAe,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QAC/B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC;IAED,KAAK;QACD,MAAM,gBAAgB,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;QACpD,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,OAAO,gBAAgB,CAAC;IAC5B,CAAC;IAED,QAAQ,CAAC,KAAa,EAAE,KAAgB;QACpC,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACnC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC;IAED,QAAQ,CAAC,KAAa;QAClB,MAAM,gBAAgB,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;QACxD,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,OAAO,gBAAgB,CAAC;IAC5B,CAAC;IAED,SAAS,CAAC,KAAa,EAAE,KAAgB;QACrC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC/B,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC;QAC5B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACxB,OAAO,QAAQ,CAAC;IACpB,CAAC;IAED,eAAe,CAAC,GAAQ,EAAE,QAAgB,EAAE,QAAa;QACrD,OAAO,2BAA2B,QAAQ,kBAAkB,GAAG,UAAU;YAClE,sBAAsB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;IACpE,CAAC;IAED,WAAW,CAAC,KAAY;QACpB,qDAAqD;QACrD,qDAAqD;QACrD,kCAAkC;QAClC,MAAM,kBAAkB,GAAG,CAAC,CAAC;QAC7B,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;QAC9B,mDAAmD;QACnD,oCAAoC;QACpC,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;QAC1F,MAAM,kBAAkB,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAChD,MAAM,SAAS,GAAG,kBAAkB,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACxD,MAAM,UAAU,GAAG,MAAM,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,GAAG,kBAAkB,CAAC;QACzE,MAAM,WAAW,GAAG;oBACR,UAAU;;sBAER,SAAS;;uBAER,OAAO;;6BAED,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,cAAc,GAAG,CAAC,CAAC;SACxE,CAAC;QACF,yEAAiB,CAAC,WAAW,CAAC,CAAC;IACnC,CAAC;CAEJ;AAQA;;;;;;;;;;;;;ACnOD;AAAA;AAAA;AAAA;AAA0C;;;AAOnC,MAAM,YAAY;;wEAAZ,YAAY;4FAAZ,YAAY;QCPzB,yEACI;QAAA,sEACI;QAAA,wEACI;QAAA,qEAAI;QAAA,uEAA8B;QAAA,uEAAY;QAAA,4DAAI;QAAA,4DAAK;QACvD,qEAAI;QAAA,uEAA2B;QAAA,oEAAS;QAAA,4DAAI;QAAA,4DAAK;QACjD,qEAAI;QAAA,wEAA2B;QAAA,qEAAS;QAAA,4DAAI;QAAA,4DAAK;QACrD,4DAAK;QACT,4DAAM;QACV,4DAAS;QACT,4EAA+B;;6FDFlB,YAAY;cALxB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,sBAAsB;gBACnC,SAAS,EAAE,CAAC,sBAAsB,CAAC;aACpC;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACjB;AAEe;AACT;AACwB;AACG;AACS;AACtC;AACsC;AACS;AACpC;AACK;AACK;;AAwB3D,MAAM,SAAS;;wFAAT,SAAS,cAFR,2DAAY;4IAEb,SAAS,mBAHT,EAAE,YAPJ;YACP,uEAAa;YACb,oEAAgB;YAChB,0DAAW;YACX,sEAAgB;YAChB,2EAAe;SAChB;mIAIU,SAAS,mBAlBlB,2DAAY;QACZ,mFAAkB;QAClB,sFAAmB;QACnB,+FAAsB;QACtB,+FAAsB;QACtB,wGAAyB;QACzB,+EAAiB,aAGjB,uEAAa;QACb,oEAAgB;QAChB,0DAAW;QACX,sEAAgB;QAChB,2EAAe;6FAKN,SAAS;cApBrB,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,2DAAY;oBACZ,mFAAkB;oBAClB,sFAAmB;oBACnB,+FAAsB;oBACtB,+FAAsB;oBACtB,wGAAyB;oBACzB,+EAAiB;iBAClB;gBACD,OAAO,EAAE;oBACP,uEAAa;oBACb,oEAAgB;oBAChB,0DAAW;oBACX,sEAAgB;oBAChB,2EAAe;iBAChB;gBACD,SAAS,EAAE,EAAE;gBACb,SAAS,EAAE,CAAC,2DAAY,CAAC;aAC1B;;;;;;;;;;;;;;ACpCD;AAAA;AAAA;AAAA,IAAK,QAGJ;AAHD,WAAK,QAAQ;IACT,6BAAiB;IACjB,uBAAW;AACf,CAAC,EAHI,QAAQ,KAAR,QAAQ,QAGZ;AAED,IAAK,aAGJ;AAHD,WAAK,aAAa;IACd,8BAAa;IACb,oCAAmB;AACvB,CAAC,EAHI,aAAa,KAAb,aAAa,QAGjB;AAiBA;;;;;;;;;;;;;ACzBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0G;AAE7B;AAEpC;AACM;AAEqC;AAC/B;;;;;;;;;;ICkBrC,yEACI;IAAA,0EAAqB;IAAA,uDAAa;IAAA,4DAAM;IACxC,yEACI;IAAA,0EAKA;IAJI,qUAA+B;IAInC,4DAAM;IACN,0EAIA;IAHI,uUAA+B;IAGnC,4DAAM;IACV,4DAAM;IACN,0EACI;IADa,+WAA0C;IACvD,qEACJ;IAAA,4DAAM;IACV,4DAAM;;;;IAjBmB,0DAAa;IAAb,6EAAa;IAEzB,0DAA+B;IAA/B,oGAA+B;IAGhC,wJAA8B;IAK9B,0DAAiC;IAAjC,2JAAiC;;ADtBtD,MAAM,kBAAkB;IA2B7B,YAAoB,KAAwB;QAAxB,UAAK,GAAL,KAAK,CAAmB;QAzBlC,aAAQ,GAAG,IAAI,0DAAY,EAAmB,CAAC;QAKzD,4CAA4C;QACnC,WAAM,GAAG,GAAG,CAAC;QACb,6BAAwB,GAAG,EAAE,CAAC;QAC9B,kBAAa,GAAG;YACvB,IAAI,EAAG,YAAY;YACnB,WAAW,EAAE,IAAI;YACjB,KAAK,EAAE,UAAU;YACjB,aAAa,EAAE,IAAI;YACnB,YAAY,EAAE,IAAI;YAClB,WAAW,EAAE,IAAI;YACjB,SAAS,EAAE,EAAC,YAAY,EAAE,cAAc,EAAC;SAC1C,CAAC;QACO,kBAAa,GAAG,OAAO,CAAC;QAGjC,6BAAwB,GAAY,IAAI,CAAC;QACzC,sBAAiB,GAAW,8DAAa,CAAC,OAAO,CAAC;QAKhD,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED,eAAe;QACb,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;QACxD,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,yBAAyB,EAAE,CAAC;IACnC,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IAC/D,CAAC;IAED,yBAAyB;QACvB,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,UAAU,EAAE,CAAC,EAAE,EAAE;YACvD,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,gBAAgB,EAAE;gBACtC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAC,UAAU,EAAE,IAAI,EAAE,EAAC,cAAc,EAAE,KAAK,EAAC,CAAC,CAAC;aAC7F;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,cAAc,CAAC,WAAoB;QACjC,IAAI,CAAC,wBAAwB,GAAG,WAAW,CAAC;QAC5C,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC;IAC7B,CAAC;IAED,gBAAgB,CAAC,aAAqB;QACpC,IAAI,CAAC,iBAAiB,GAAG,aAAa,CAAC;QACvC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC;IAC7B,CAAC;IAED,wBAAwB;QACtB,OAAO;YACL,IAAI,EAAE,EAAE;YACR,OAAO,EAAE,EAAE;SACZ,CAAC;IACJ,CAAC;IAED,qBAAqB,CAAC,SAAiB;QACnC,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;IACtD,CAAC;IAED,kBAAkB,CAAC,YAAoB,IAAI,CAAC,uBAAuB,CAAC,MAAM;QACxE,MAAM,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC;QAC9B,MAAM,aAAa,GAAG,SAAS,GAAG,CAAC;QACnC,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,EAAE,IAAI,CAAC,wBAAwB,EAAE,CAAC,CAAC;QACvF,MAAM,CAAC,qBAAqB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC;IACtE,CAAC;IAED,WAAW,CAAC,SAAiB;QAC1B,QAAQ,CAAC,aAAa,CAAC,cAAc,SAAS,EAAE,CAAiB,CAAC,KAAK,EAAE,CAAC;IAC7E,CAAC;IAED,eAAe;QACb,MAAM,YAAY,GAAG,QAAQ,CAAC,gBAAgB,CAAC,sCAAsC,CAAQ,CAAC;QAC9F,OAAO,CAAC,GAAG,YAAY,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE;YACzC,OAAO;gBACL,IAAI,EAAE,IAAI,CAAC,0BAA0B,CAAC,WAAW,EAAE,MAAM,CAAC;gBAC1D,OAAO,EAAE,IAAI,CAAC,0BAA0B,CAAC,WAAW,EAAE,SAAS,CAAC;aACjE,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED,0BAA0B,CAAC,cAA2B,EAAE,WAAmB;QACzE,OAAO,cAAc,CAAC,aAAa,CAAC,iBAAiB,WAAW,IAAI,CAAC,CAAC,SAAS,CAAC;IAClF,CAAC;IAED,gBAAgB;QACd,MAAM,cAAc,GAAI,IAAI,CAAC,kBAAkB,CAAC,aAAkC,CAAC,KAAK,CAAC;QACzF,IAAI,aAAa,GAAU,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC;aACV,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;QACrE,IAAI,IAAI,CAAC,wBAAwB,EAAE;YACjC,aAAa,GAAG,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;SAC3C;QACD,OAAO,aAAa,IAAI,EAAE,CAAC;IAC7B,CAAC;IAED,2BAA2B;QACzB,OAAO,CAAC,IAAI,CAAC,wBAAwB,CAAC;YACpC,CAAC,CAAC,uBAAuB;YACzB,CAAC,CAAC,2BAA2B,CAAC;IAClC,CAAC;IAED,aAAa,CAAC,KAAqB;QACjC,mCAAmC;QACnC,kDAAkD;QAClD,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,MAAM,UAAU,GAAG,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAC7D,QAAQ,CAAC,WAAW,CAAC,YAAY,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;IACxD,CAAC;IAED,iBAAiB;QACf,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;QAC1C,MAAM,iBAAiB,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QAC5C,MAAM,cAAc,GAAG,iBAAiB,CAAC;QACzC,OAAO,cAAc,CAAC;IACxB,CAAC;IAED,SAAS;QACP,MAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC5C,MAAM,uBAAuB,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QACvD,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC9C,MAAM,aAAa,GAAG,8DAAa,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC5D,MAAM,QAAQ,GAAG,iFAAwB,CAAC,aAAa,CAAC,CAAC;QACzD,MAAM,MAAM,GAAoB;YAC9B,UAAU;YACV,uBAAuB;YACvB,aAAa;YACb,aAAa;YACb,QAAQ;SACT,CAAC;QACF,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,iBAAiB;QACf,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;QAChC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC7B,CAAC;IAED,cAAc;QACZ,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;QAChC,MAAM,CAAC,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QACtC,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;QACvE,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QACnC,CAAC,CAAC,QAAQ,GAAG,qBAAqB,CAAC;QACnC,CAAC,CAAC,KAAK,EAAE,CAAC;IACZ,CAAC;IAED,WAAW,CAAC,SAA0B,wEAAoB;QACxD,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU;QACnC,IAAI,CAAC,uBAAuB,GAAG,MAAM,CAAC,uBAAuB,CAAC;QAC9D,IAAI,CAAC,qBAAqB,GAAG,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/D,CAAC;IAED,UAAU,CAAC,KAAY;QACrB,MAAM,YAAY,GAAI,KAAK,CAAC,MAA2B,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACjE,MAAM,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC;QACpC,UAAU,CAAC,MAAM,GAAG,eAAe,CAAC,EAAE;YACpC,MAAM,UAAU,GAAG,eAAe,CAAC,MAAM,CAAC,MAAgB,CAAC;YAC3D,IAAI;gBACF,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;aAC1C;YAAC,WAAM;gBACN,wEAAgB,CAAC,uBAAuB,CAAC,CAAC;aAC3C;QACH,CAAC,CAAC;QACF,UAAU,CAAC,UAAU,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;IAC/C,CAAC;;oFA9KU,kBAAkB;kGAAlB,kBAAkB;;6EAIM,wDAAU;6EACT,wDAAU;;;;;;;;QCpBhD,yEAEI;QACA,uFAMA;QAHI,mMAAwB;QAG5B,4DAAiB;QAGjB,yEACI;QAAA,yEAEI;QAAA,yEACI;QAAA,yEACI;QAAA,yEAA0B;QAAA,4DAAC;QAAA,4DAAM;QACjC,yEACI;QAAA,0EAAuB;QAAA,gEAAI;QAAA,4DAAM;QACjC,2EAA0B;QAAA,mEAAO;QAAA,4DAAM;QAC3C,4DAAM;QACV,4DAAM;QACV,4DAAM;QAEN,+EACI;QAAA,iHAkBM;QACV,4DAAM;QAEN,2EACI;QAAA,8EAAuC;QAA/B,2IAAS,wBAAoB,IAAC;QAAC,oEAAQ;QAAA,4DAAS;QACxD,8EAGI;QAFI,2IAAS,uBAAmB,IAAC;QAEjC,gFACJ;QAAA,4DAAS;QACb,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;QACN,2EACQ;QAAA,kFAGI;QADI,2RAAU,+BAAqC,IAAC;QACpD,8EACI;QAAA,qEACJ;QAAA,4DAAS;QACT,0EACI;QAAA,kEACJ;QAAA,4DAAS;QACb,4DAAS;QACb,uEACI;QAAA,6EAA4B;QAAA,2EAAe;QAAA,4DAAQ;QACnD,4EAMA;QAAA,6EAGI;QAAA,6EAAgB;QAAA,4DAAQ;QAC5B,iFAMJ;QAHW,wRAAS,+BAAmC,IAAC;QAHpD,4DAMJ;QAAA,4DAAM;QACN,8EAAmC;QAA3B,2IAAS,oBAAgB,IAAC;QAAC,8EAAkB;QAAA,4DAAS;QAC9D,8EAAuC;QAA/B,yRAAS,WAAoB,IAAC;QAAC,8EAAkB;QAAA,4DAAS;QAClE,iFACJ;QADyB,kJAAU,sBAAkB,IAAC;QAAlD,4DACJ;QAAA,4DAAM;;;QArFE,0DAAwB;QAAxB,mFAAwB;QAoB8B,2DAA4B;QAA5B,gGAA4B;QAgD3E,2DAA6C;QAA7C,0GAA6C;QAI7C,0DAA2C;QAA3C,0FAA2C;QAO3C,0DAA2C;QAA3C,0FAA2C;;6FDtE7C,kBAAkB;cAL9B,uDAAS;eAAC;gBACT,QAAQ,EAAE,YAAY;gBACtB,WAAW,EAAE,6BAA6B;gBAC1C,SAAS,EAAE,CAAC,6BAA6B,CAAC;aAC3C;+GAGW,QAAQ;kBAAjB,oDAAM;YACkB,UAAU;kBAAlC,uDAAS;mBAAC,YAAY;YACyB,kBAAkB;kBAAjE,uDAAS;mBAAC,eAAe,EAAE,EAAC,IAAI,EAAE,wDAAU,EAAC;YACG,cAAc;kBAA9D,uDAAS;mBAAC,gBAAgB,EAAE,EAAC,IAAI,EAAE,wDAAU,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;AEHjD;AAAA;AAAA;AAAA,IAAK,SAKJ;AALD,WAAK,SAAS;IACV,8BAAiB;IACjB,sCAAyB;IACzB,8BAAiB;IACjB,sCAAyB;AAC7B,CAAC,EALI,SAAS,KAAT,SAAS,QAKb;AAED,MAAM,OAAO,GAAG;IACZ,gBAAgB,EAAE,kEAAkE;IACpF,SAAS,EAAE,wBAAwB;IACnC,GAAG,EAAE,IAAI;CACZ;AAOA;;;;;;;;;;;;;ACnCD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;AAEiB;AACL;AACU;AACX;;;;;;ICSzC,6EAGQ;IAAA,uDACR;IAAA,4DAAS;;;IAHD,qFAAyB;IAEzB,0DACR;IADQ,4FACR;;;IAPJ,8EAGI;;IAAA,qIAIS;;IACb,4DAAW;;;IAPC,yJAAwC;IAElB,0DAAkC;IAAlC,6JAAkC;;;IAa5E,6EAA+D;;;IAAnC,oFAAoB;;ADhBzC,MAAM,sBAAsB;IAQjC;QAJS,mBAAc,GAAG,yBAAyB,CAAC;QAC3C,mBAAc,GAAG,yDAAK,CAAC;QACvB,yBAAoB,GAAG,8DAAU,CAAC;QAGzC,IAAI,CAAC,eAAe,GAAG,mDAAmB,CAAC;IAC7C,CAAC;IAED,UAAU,CAAC,KAAY;QACrB,MAAM,YAAY,GAAI,KAAK,CAAC,MAA2B,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACjE,MAAM,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC;QACpC,UAAU,CAAC,MAAM,GAAG,eAAe,CAAC,EAAE;YACpC,MAAM,UAAU,GAAG,eAAe,CAAC,MAAM,CAAC,MAAgB,CAAC;YAC3D,IAAI;gBACF,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;aACtC;YAAC,WAAM;gBACN,wEAAgB,CAAC,uBAAuB,CAAC,CAAC;aAC3C;QACH,CAAC,CAAC;QACF,UAAU,CAAC,UAAU,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;IAC/C,CAAC;IAED,kBAAkB,CAAC,QAAgB;QACjC,QAAO,QAAQ,EAAE;YACf,KAAK,OAAO;gBACV,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC;gBAClC,MAAM;YAER,KAAK,YAAY;gBACf,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC;gBACxC,MAAM;SACT;IACH,CAAC;;4FApCU,sBAAsB;sGAAtB,sBAAsB;;QCXnC,qEAAI;QAAA,yFAA8B;QAAA,4DAAK;QAEvC,gEAEA;QAAA,yEACI;QAAA,2EAAmB;QAAA,uFAA4B;QAAA,4DAAQ;QACvD,2EACA;QAD8B,qJAAU,sBAAkB,IAAC;QAA3D,4DACA;QAAA,gEACA;QAAA,2EAAsB;QAAA,4FAAiC;QAAA,4DAAQ;QAE/D,gFACI;QAAA,8HAQW;;QACf,4DAAS;QACT,6EACI;QADwB,4RAAS,iCAAkC,IAAC;QACpE,qEACJ;QAAA,4DAAS;QACb,4DAAM;QAGN,oIAA+D;;QAhBjB,2DAA6B;QAA7B,0JAA6B;QAgB7D,0DAAY;QAAZ,4EAAY;;6FDhBb,sBAAsB;cAJlC,uDAAS;eAAC;gBACT,WAAW,EAAE,iCAAiC;gBAC9C,SAAS,EAAE,CAAC,iCAAiC,CAAC;aAC/C;;;;;;;;;;;;;;;;;;;;;;;;;AEVD;AAAA;AAAA;AAAA;AAAA;AAA0C;;;;AAQnC,MAAM,sBAAsB;IAIjC,UAAU,CAAC,MAAuB;QAChC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;;4FANU,sBAAsB;sGAAtB,sBAAsB;QCRnC,qEAAI;QAAA,yFAA8B;QAAA,4DAAK;QAEvC,gFAA4C;QAAhC,8JAAY,sBAAkB,IAAC;QAAC,4DAAa;QACzD,4EAAgD;;QAAnC,0DAAoB;QAApB,iFAAoB;;6FDKpB,sBAAsB;cALlC,uDAAS;eAAC;gBACT,QAAQ,EAAE,gBAAgB;gBAC1B,WAAW,EAAE,iCAAiC;gBAC9C,SAAS,EAAE,CAAC,iCAAiC,CAAC;aAC/C;;;;;;;;;;;;;;AEPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACc;AAC4B;AACA;AACS;;;AAE5F,MAAM,MAAM,GAAW;IACrB,EAAC,IAAI,EAAE,cAAc,EAAE,SAAS,EAAE,wGAAyB,EAAE;IAC7D,EAAC,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,+FAAsB,EAAE;IACvD,EAAC,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,+FAAsB,EAAE;IACvD,EAAC,IAAI,EAAE,EAAE,EAAE,UAAU,EAAE,eAAe,EAAE,SAAS,EAAE,MAAM,EAAE;CAC5D,CAAC;AAMK,MAAM,gBAAgB;;+FAAhB,gBAAgB;0JAAhB,gBAAgB,kBAHlB,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,EAAC,EAAC,OAAO,EAAC,IAAI,EAAC,CAAC,CAAC,EAC5C,4DAAY;mIAEX,gBAAgB,uFAFjB,4DAAY;6FAEX,gBAAgB;cAJ5B,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,EAAC,EAAC,OAAO,EAAC,IAAI,EAAC,CAAC,CAAC;gBACtD,OAAO,EAAE,CAAC,4DAAY,CAAC;aACxB;;;;;;;;;;;;;;AChBD;AAAA;AAAA;AAAA;AAA0C;;;AAMnC,MAAM,yBAAyB;IAEpC,gBAAgB,CAAC;;kGAFN,yBAAyB;yGAAzB,yBAAyB;QCNtC,qEAAI;QAAA,4FAAiC;QAAA,4DAAK;QAE1C,yEACI;QAAA,0EACI;QAAA,0EACI;QAAA,qEAAI;QAAA,6EAAkB;QAAA,4DAAK;QAC/B,4DAAU;QACV,sEACI;QAAA,4MAGJ;QAAA,4DAAM;QACV,4DAAU;QAEV,0EACI;QAAA,2EACI;QAAA,sEAAI;QAAA,qFAAyB;QAAA,4DAAK;QACtC,4DAAU;QACV,uEACI;QAAA,6KACgC;QAAA,qEAAG;QAAA,qEAAG;QAAA,wEAA6B;QAAA,0EAAc;QAAA,4DAAI;QAAA,4DAAI;QAAA,4DAAI;QAAC,wFAC9F;QAAA,iEACA;QAAA,iEACA;QAAA,0HAA6D;QAAA,qEAAG;QAAA,uEAAW;QAAA,4DAAI;QAAC,yOAEhF;QAAA,iEACA;QAAA,iEACA;QAAA,uLACc;QAAA,qEAAG;QAAA,qEAAG;QAAA,wEAA6B;QAAA,0EAAc;QAAA,4DAAI;QAAA,4DAAI;QAAA,4DAAI;QAAA,uKACvB;QAAA,qEAAG;QAAA,mEAAO;QAAA,4DAAI;QAAC,4FACnE;QAAA,iEACA;QAAA,iEACA;QAAA,sHAAyD;QAAA,qEAAG;QAAA,wFAA4B;QAAA,4DAAI;QAAC,sGACjG;QAAA,4DAAM;QACV,4DAAU;QAEV,2EACI;QAAA,2EACI;QAAA,sEAAI;QAAA,wFAA4B;QAAA,4DAAK;QACzC,4DAAU;QACV,uEACI;QAAA,uJAEA;QAAA,qEAEA;QAAA,oIAAuE;QAAA,qEAAG;QAAA,6DAAC;QAAA,4DAAI;QAAC,8LAExE;QAAA,qEAAG;QAAA,mEAAO;QAAA,4DAAI;QAAA,6MAEtB;QAAA,iEACA;QAAA,iEACA;QAAA,8LAC+B;QAAA,qEAAG;QAAA,iEAAK;QAAA,4DAAI;QAAC,0GAA6C;QAAA,qEAAG;QAAA,6DAAC;QAAA,4DAAI;QAAA,+DACjG;QAAA,iEACA;QAAA,iEACA;QAAA,gLACgB;QAAA,qEAAG;QAAA,iEAAK;QAAA,4DAAI;QAAC,seAK7B;QAAA,iEACA;QAAA,iEACA;QAAA,yZAIA;QAAA,iEACA;QAAA,iEACA;QAAA,2NAEA;QAAA,iEACA;QAAA,iEACA;QAAA,0IACJ;QAAA,4DAAM;QACV,4DAAU;QAEV,2EACI;QAAA,2EACI;QAAA,sEAAI;QAAA,qFAAyB;QAAA,4DAAK;QACtC,4DAAU;QACV,uEACI;QAAA,oWAKA;QAAA,iEACA;QAAA,iEACA;QAAA,qEAEA;QAAA,uEAAU;QAAA,qEAAG;QAAA,6DAAC;QAAA,4DAAI;QAAC,2PAGT;QAAA,qEAAG;QAAA,6DAAC;QAAA,4DAAI;QAAC,yTAGO;QAAA,qEAAG;QAAA,6DAAC;QAAA,4DAAI;QAAA,gLAIlC;QAAA,uEACI;QAAA,uEAAK;QAAA,wGAA0C;QAAA,4DAAK;QACpD,uEAAK;QAAA,8KACgC;QAAA,4DAAK;QAC1C,uEAAK;QAAA,0JAA4F;QAAA,4DAAK;QACtG,uEAAK;QAAA,+HAAiE;QAAA,4DAAK;QAC/E,4DAAK;QAEL,iOAC+C;QAAA,sEAAG;QAAA,+EAAkB;QAAA,4DAAI;QAAA,2NAGxE;QAAA,kEAAI;QAAA,kEACJ;QAAA,8XAGmB;QAAA,kEAAI;QAAA,kEACvB;QAAA,2JACC;QAAA,sEAAG;QAAA,qEAAQ;QAAA,4DAAI;QAAA,6KAGhB;QAAA,kEAAI;QAAA,kEAEJ;QAAA,sEACA;QAAA,4YAG+E;QAAA,kEAAI;QAAA,kEACnF;QAAA,6NAGA;QAAA,kEAAI;QAAA,kEACJ;QAAA,kEAAI;QAAA,kEAGJ;QAAA,sEACA;QAAA,4aAGuG;QAAA,kEAAI;QAAA,kEAC3G;QAAA,kTAGA;QAAA,kEAAI;QAAA,kEAGJ;QAAA,kEAAI;QAAA,kEACJ;QAAA,2cAGiG;QAAA,kEAAI;QAAA,kEACrG;QAAA,+UAGA;QAAA,kEAAI;QAAA,kEACJ;QAAA,6NACgE;QAAA,kEAAI;QAAA,kEACpE;QAAA,okBAQA;QAAA,kEACA;QAAA,2EACI;QAAA,sEACA;QAAA,sEACJ;QAAA,4DAAM;QAGN,kEACA;QAAA,kEACA;QAAA,sQAEA;QAAA,kEACA;QAAA,sEACJ;QAAA,4DAAM;QACV,4DAAU;QACd,4DAAM;;6FD/KO,yBAAyB;cAJrC,uDAAS;eAAC;gBACT,WAAW,EAAE,oCAAoC;gBACjD,SAAS,EAAE,CAAC,oCAAoC,CAAC;aAClD;;;;;;;;;;;;;;AELD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AAIU;AAEV;AACJ;;;AAE3C,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,gBAAgB,CAAC,0DAAU;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;;;;;;ACdpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,qC","file":"main.js","sourcesContent":["import { Input, Component, ChangeDetectorRef } from '@angular/core';\nimport { DataStructure, Grapher, NodeType, AnimationNode } from '../grapher/grapher';\n\n@Component({\n  selector: 'animator',\n  templateUrl: './animator.component.html',\n  styleUrls: ['./animator.component.scss']\n})\nexport class AnimatorComponent {\n\n  // grapher variables\n  grapher: Grapher;\n  nodes: AnimationNode[];\n  dataStructure: DataStructure;\n  nodeType: NodeType;\n\n  // slider variables\n  duration: string;\n  delay: string;\n  readonly MILLISECONDS_TO_SECONDS: number = 0.001;\n  readonly SPEED_DURATION_RATIO: number = 3/5 * this.MILLISECONDS_TO_SECONDS;\n  readonly SPEED_DELAY_RATIO: number = 1/5 * this.MILLISECONDS_TO_SECONDS;\n\n  // animator variables\n  scale: number = 1;\n  dragging: boolean;\n  startingX: number;\n  startingY: number;\n  deltaX: number = 0;\n  deltaY: number = 0;\n  newDeltaX: number = 0;\n  newDeltaY: number = 0;\n  readonly MIN_SCALE: number = 0.01; \n\n  // animator grapher-dependant variables\n  graphLeftMargin: number = 0;\n  graphBottomMargin: number = 40;\n  nodeContainer: HTMLElement;\n  nodeTypePadding: number;\n  graphHeight: number;\n  fixedValues: string;\n  readonly NODE_WIDTH: number = 30;\n\n  // barPlots UI variables\n  readonly MIN_BAR_HEIGHT: number = 5;\n  readonly MAX_BAR_HEIGHT: number = 200;\n  readonly BAR_PADDING: number = 5;\n\n  // list UI variables\n  readonly SQUARE_PADDING: number = 30;\n  readonly SQUARE_HEIGHT: number = this.NODE_WIDTH;\n\n  @Input() title: string;\n\n  @Input() \n  set newSpeed(speed: number) {\n    this.duration = speed * this.SPEED_DURATION_RATIO + \"s\";\n    this.delay = speed * this.SPEED_DELAY_RATIO + \"s\";\n  }\n\n  @Input() \n  set newGrapher(grapher: Grapher) {\n    if(!grapher) return;\n    this.grapher = grapher;\n    this.grapher._setAnimator(this);\n    this.nodes = this.grapher.getNodes();\n    this.dataStructure = grapher.getDataStructure();\n    this.nodeType = grapher.getNodesType();\n\n    this.cdRef.detectChanges();\n    this.buildGraph();\n  }\n  \n  constructor(private cdRef: ChangeDetectorRef) { }\n\n  buildGraph() {\n    this.setNodeContainerIfUndefined();\n\n    // Configure the nodes of the animation depending \n    // on the data structure \n    switch(this.dataStructure) {\n      case DataStructure.BarPlot:\n        this.nodeTypePadding = this.BAR_PADDING;\n        this.adjustBarsHeightToScreen();\n        break;\n\n      case DataStructure.List:\n        this.nodeTypePadding = this.SQUARE_PADDING;\n        this.graphHeight = this.SQUARE_HEIGHT;\n        break;\n    }\n    this.centerNodes();\n  }\n\n  setNodeContainerIfUndefined() {\n    if (!this.nodeContainer) {\n      this.nodeContainer = document.querySelector(\".node-ctn\");\n    }\n  }\n\n  adjustBarsHeightToScreen() {\n    // This method is called only when the data structure used\n    // is of type barplot.\n    // It adjusts the heights of all the bars to have them \n    // nicely fit in the screen\n    this.normaliseBarsHeight();\n    const nodesHeight = this.nodes.map(node => node.height);\n    this.graphHeight = Math.max(...nodesHeight);\n  }\n\n  refreshGraph = (nodeWasAdded: boolean) => {\n    if (this.dataStructure === DataStructure.BarPlot) {\n      this.adjustBarsHeightToScreen();\n    }\n    if (nodeWasAdded) {\n      this.centerNodes();\n    }\n    this.cdRef.detectChanges();\n  }\n\n  normaliseBarsHeight() {\n    // used to set the height of barplot bars with respect\n    // to their values\n    const values = this.nodes.map(node => node.value) as number[];\n    let minValue = Math.min(...values);\n    minValue = (minValue > 0) ? 0 : minValue;\n    const maxValue = Math.abs(Math.max(...values));\n    const deltaMinMax = maxValue - minValue;\n\n    this.nodes.forEach(node => \n      node.height = (node.value as number - minValue) / deltaMinMax * this.MAX_BAR_HEIGHT + this.MIN_BAR_HEIGHT\n    );\n  }\n\n  centerNodes() {\n    this.setNodesLeftMargin();\n    this.setNodesBottomMargin();\n  }\n\n  setNodesLeftMargin() {\n    const nodesLength = this.nodes.length;\n    const graphWidth = this.NODE_WIDTH * nodesLength + this.nodeTypePadding * (nodesLength - 1);\n    const containerWidth = Number(getComputedStyle(this.nodeContainer).getPropertyValue(\"width\").slice(0, -2));\n    this.graphLeftMargin = (containerWidth - graphWidth) / 2;\n    this.nodes.forEach((node, nodeIndex) => \n      node.left = nodeIndex * (this.NODE_WIDTH + this.nodeTypePadding) + this.graphLeftMargin\n    );\n  }\n\n  setNodesBottomMargin() {\n    const containerHeight = Number(getComputedStyle(this.nodeContainer).getPropertyValue(\"height\").slice(0, -2));\n    this.graphBottomMargin = (containerHeight - this.graphHeight) / 2;\n  }\n\n  shiftNodeToRight(node: AnimationNode) {\n    this.shiftNode(node, +1);\n  }\n\n  shiftNodeToLeft(node: AnimationNode) {\n    this.shiftNode(node, -1);\n  }\n\n  shiftNode(node: AnimationNode, shiftDirection: 1 | -1) {\n    const HALF_BLOCK = 0.5;\n    const shiftAmount = (this.NODE_WIDTH + this.nodeTypePadding) * HALF_BLOCK * shiftDirection;\n    node.left += shiftAmount;\n  }\n\n  applyWheelZoom(event: WheelEvent) {\n    if (!this.nodeContainer) return;\n    event.preventDefault();\n    this.updateScale(event);\n  }\n\n  getZoomDirection({deltaY}: any): 1 | -1 {\n    return deltaY < 0 ? 1 : -1;\n  }\n\n  updateScale({deltaY}: any): boolean {\n    const changingFactor = this.getZoomDirection({deltaY}) * 0.1;\n    const scaleIsMinScale = this.scale + changingFactor < this.MIN_SCALE;\n    if (!scaleIsMinScale) {\n      this.scale += changingFactor;\n    } \n    return !scaleIsMinScale;\n  }\n\n  updatePropertyInPx(element: HTMLElement, property: string, delta: number) {\n    element.style.setProperty(property, delta + \"px\");\n  }\n\n  shiftGraph(event: MouseEvent) {\n    if (!this.grapher) return;\n    \n    event.preventDefault();\n    if (this.dragging) {\n      this.newDeltaX = event.x - this.startingX;\n      this.newDeltaY = event.y - this.startingY;\n      this.updatePropertyInPx(this.nodeContainer, \"margin-left\", this.newDeltaX + this.deltaX);\n      this.updatePropertyInPx(this.nodeContainer, \"margin-top\", this.newDeltaY + this.deltaY);\n    }\n  }\n\n  setDragging(isDragging: boolean, event: MouseEvent = null) {\n    this.dragging = isDragging;\n    if (isDragging) {\n      this.startingX = event.x;\n      this.startingY = event.y;\n    } else {\n      this.deltaX += this.newDeltaX; \n      this.deltaY += this.newDeltaY; \n    }\n  }\n}\n","\n<div [ngClass]=\"['fixed-ctn', \n                 dragging ? 'close-hand' : '']\"\n    (mousewheel)=\"applyWheelZoom($event)\" \n    (mousedown)=\"setDragging(true, $event)\"\n    (mousemove)=\"shiftGraph($event)\" \n    (mouseup)=\"setDragging(false)\"\n\n>\n    <div class=\"title\">Function: <b>{{title}}</b></div>\n    <div *ngIf=\"grapher\"\n         class=\"node-ctn\" \n         [ngStyle]=\"{'transform': 'scale(' + scale + ')'}\"\n    >\n        <div [class]=\"dataStructure | lowercase\">\n            <div *ngFor=\"let node of nodes; let nodeIndex = index\"\n                 [id]=\"'node-' + node.id\"\n                 [attr.data-index]=\"nodeIndex\"\n                 [attr.data-value]=\"node.value\"\n\n                 [style.bottom.px]=\"graphBottomMargin\"\n                 [style.height.px]=\"node.height\"\n                 [style.left.px]=\"node.left\"\n                 [style.--mode-color]=\"node.HEXColor\"\n                 [style.--duration]=\"this.duration\"\n                 \n                 [ngClass]=\"[nodeType | lowercase, 'node']\"\n            >\n                <span>{{node.value}}</span>\n            </div>\n        </div>\n    </div>\n</div>\n","let currentPopUp: HTMLDivElement;\r\n\r\nfunction printError(title: string, messageHTML: string) {\r\n    const errorWindow = window.open(\"\", title, \"width=1000, height=400\");\r\n    errorWindow.document.body.innerHTML = `<h2>${title}</h2> <br> ${messageHTML}`;\r\n}\r\n\r\nfunction printSyntaxError(messageHTML: string) {\r\n    printError(\"Syntax Error\", messageHTML);\r\n}\r\n\r\nfunction printRuntimeError(messageHTML: string) {\r\n    printError(\"Runtime Error in input code\", messageHTML);\r\n}\r\n\r\nfunction interactionError(interactionErrorReason: string) {\r\n    const popUp = createPopUp(\"This action cannot be performed\", interactionErrorReason); \r\n    document.body.appendChild(popUp);\r\n    setTimeout(deleteCurrentPopUp, 5000);\r\n}\r\n\r\nfunction createPopUp(title: string, message: string): HTMLDivElement {\r\n    if (currentPopUp) {\r\n        deleteCurrentPopUp();\r\n    }\r\n    currentPopUp = document.createElement(\"div\");\r\n    currentPopUp.id = new Date().toString();\r\n    currentPopUp.classList.add(\"popup\");\r\n    const closeButton = document.createElement(\"button\");\r\n    closeButton.onclick = deleteCurrentPopUp;\r\n    closeButton.innerHTML = \"x\";\r\n    currentPopUp.innerHTML = `\r\n        <h3>${title}</h3>\r\n        <div>${message}</div>\r\n    `\r\n    currentPopUp.appendChild(closeButton);\r\n    return currentPopUp;\r\n}\r\n\r\nfunction deleteCurrentPopUp() {\r\n    if(!currentPopUp) return;\r\n    currentPopUp.parentNode.removeChild(currentPopUp);\r\n    currentPopUp = null;\r\n}\r\n\r\nexport {\r\n    printError,\r\n    printSyntaxError,\r\n    printRuntimeError,\r\n    interactionError\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Options } from '@angular-slider/ngx-slider';\nimport { Component, ElementRef, Input, QueryList, ViewChild, ViewChildren } from '@angular/core';\nimport { AnimationConfig } from '../interfaces/codeInterfaces';\nimport { DynamicFunction, InputType, LinesSelection, REGEXES } from '../interfaces/dynamicFunctionsInterfaces';\nimport { Grapher } from '../grapher/grapher';\nimport { printRuntimeError, printSyntaxError } from '../errorGenerator';\n\n@Component({\n  selector: 'code-output',\n  templateUrl: './code-output.component.html',\n  styleUrls: ['./code-output.component.scss']\n})\nexport class CodeOutputComponent {\n\n  @ViewChildren(\"codeCommentLine\") codeCommentLines: QueryList<ElementRef>;\n  @ViewChild(\"delay\", {read: ElementRef}) delay: ElementRef;\n\n  readonly value: number = 1000;\n  readonly options: Options = {\n      floor: 100,\n      ceil: 2500\n  };\n  \n  readonly DEFAULT_ANIMATION_WAITING_TIME = 100;\n   \n  currentLine: number;\n  currentLinesSelection: LinesSelection;\n  currentComment: string;\n  currentUserFunction: string;\n  currentGenerator: Generator;\n  \n  animationHasStarted: boolean = false; \n  animationIsPaused: boolean = false;\n  animation: any;\n  grapher: Grapher;\n  config: AnimationConfig;\n  userFunctions: DynamicFunction[];\n\n  constructor() { }\n\n  @Input() \n  set newConfig(config: AnimationConfig) {\n    if(!config) return;\n    this.config = config;\n    this.setUpAnimation();\n\n    // Check syntax validity of the dynamic code \n    try {\n      new Function(\"grapher\", this.tryCatchCode(config.executable))(this.grapher);\n    } catch(error) {\n      this.config = null;\n      const messageHTML = `\n        There is a syntax error in your input code. Please fix it\n        before proceeding with the creation of the animation. \n        <br>\n        <hr>\n        ${error}`;\n      printSyntaxError(messageHTML);\n    }\n  }\n\n  clearDisplayedCode() {\n    this.currentLinesSelection = null;\n  }\n\n  clearAnimation() {\n    this.animationIsPaused = false;\n    this.animationHasStarted = false;\n    this.currentComment = \"\";\n    this.currentLine = null;\n    this.currentGenerator = null;\n    this.currentUserFunction = null;\n    clearTimeout(this.animation);\n  }\n\n  setUpAnimation() {\n    this.clearDisplayedCode();\n    this.clearAnimation();\n    this.buildInitialGraph();\n  }\n  \n  startAnimation() {\n    this.animationHasStarted = true;\n    this.executeGenerator(this.currentGenerator);\n  }\n\n  togglePause() {\n    this.animationIsPaused = !this.animationIsPaused;\n  }\n\n  buildInitialGraph() {\n    const {\n      initialValues,\n      nodeType, \n      dataStructure\n    } = this.config;\n    this.grapher = new Grapher(nodeType, dataStructure, initialValues);\n    this.generateUserFunctionsFromCode();\n  }\n\n  // return dynamic code scoped into a try and catch block\n  tryCatchCode(code: string): string {\n    return `try {${code}} catch(e) { grapher._printError(e) }`;\n  }\n\n  generateUserFunctionsFromCode() {\n    const executableCode = this.config.executable;\n    this.userFunctions = new Function(\"grapher\", this.tryCatchCode(executableCode))(this.grapher);\n  } \n  \n  highlightLine(line: any) {\n    this.currentLine = line.line ?? line;\n\n    // line index in the codeComment block\n    const lineNumber = this.currentLine - this.currentLinesSelection.start;\n    let codeCommentLine = this.codeCommentLines.toArray()[lineNumber]; \n    try {\n      this.currentComment = line?.comment ?? codeCommentLine.nativeElement.dataset.comment;\n    } catch(error) {\n      throw `Line ${lineNumber} does on exist in the code-comment block`;\n    }\n  }\n\n   selectUserFunction(functionIndex: number) {\n    const inputs = this.getInputsForFunction(functionIndex);\n    const castedParams = this.castInputValues(inputs);\n    const userFunction = this.userFunctions[functionIndex];\n    this.currentUserFunction = userFunction.name;\n    this.currentLinesSelection = userFunction.lines;\n    this.currentGenerator = userFunction.body(castedParams);\n  }\n\n  getInputsForFunction(functionIndex: number): HTMLInputElement[] {\n    const userFunctionsBar = document.getElementById(\"user-functions\");\n    return userFunctionsBar.querySelectorAll(`[data-function-index='${functionIndex}'] > input`) as any;\n  }\n\n  castInputValues(inputs: HTMLInputElement[]): any | any[] {\n    return [...inputs].map(input => {\n      let value = input.value;\n      switch(input.dataset.type) {\n        case InputType.Number:\n          return Number(value);\n\n        case InputType.NumberList:\n          return value.split(\",\").map(Number);\n\n        case InputType.String:\n          return value;\n\n        case InputType.StringList:\n          return value.split(\",\");\n      }\n    })[0];\n  }\n\n  functionInputsAreValid(functionIndex: number): boolean{\n    const inputs = this.getInputsForFunction(functionIndex) as any;\n    return [...inputs].map(this.inputIsValid).every(input => input);\n  }\n\n  inputIsValid(input: HTMLInputElement): boolean {\n    let regex: RegExp;\n    const datatype = input.dataset.type;\n    const value = input.value; \n\n    if (value === \"\") return false;\n\n    switch (datatype) {\n      case InputType.Number:\n        regex = REGEXES.NUMERICAL;\n      break;\n\n      case InputType.NumberList: \n        regex = REGEXES.NUMERICAL_SERIES;\n      break;\n\n      case InputType.String:\n      case InputType.StringList: \n        return true;\n    }\n    return regex.test(value);\n  } \n\n  toggleInputValidity(regex: RegExp, element: HTMLInputElement) {\n    const value = element.value;\n    const isValid = regex.test(value);\n    if(isValid) {\n      element.classList.remove(\"wrong\");\n    } else {\n      element.classList.add(\"wrong\");\n    }\n    return isValid;\n  }\n\n  executeGenerator = (generator: Generator) => {\n    let waitingInterval: number;\n    \n    if (this.animationIsPaused) {\n      // animation is paused, check for awakes\n      waitingInterval = this.DEFAULT_ANIMATION_WAITING_TIME;\n    } else {\n      // animation is running, execute next line\n      let line = generator.next();\n      if (line.done) {\n        // generator is done\n        this.clearAnimation();\n        return;\n      } \n      try {\n        this.highlightLine(line.value);\n      } catch (error) {\n        printRuntimeError(error);\n        this.clearAnimation();\n        return;\n      }\n      waitingInterval = Number(this.delay.nativeElement.innerHTML);\n    }\n\n    // store the timeout object to clear it when generator is done\n    this.animation = setTimeout(this.executeGenerator, waitingInterval, generator);\n  }\n}","<!-- CODE  -->\n<div id=\"user-functions\" *ngIf=\"userFunctions\">\n    <div *ngFor=\"let function of userFunctions; \n         let functionIndex = index\"\n         [attr.data-function-index]=\"functionIndex\"\n    >  \n        <input *ngFor=\"let param of function.params; let paramIndex = index\"\n            [placeholder]=\"param.name\"\n            [attr.data-type]=\"param.type\"\n            [attr.data-index]=\"functionIndex + '-' + paramIndex\"\n            (keyup)=\"functionInputsAreValid(functionIndex + '-' + paramIndex)\"\n        >  \n        <button (click)=\"selectUserFunction(functionIndex)\"\n                [disabled]=\"!functionInputsAreValid(functionIndex)\"\n        > \n            {{function.name}}\n        </button>\n    </div> \n</div>\n\n<div class=\"code-highlighter\">\n    <ng-container *ngFor=\"let codeComment of config?.displayableCodeComments; let lineIndex=index\">\n        <div *ngIf=\"lineIndex >= (currentLinesSelection?.start || -1) && lineIndex <= (currentLinesSelection?.end || -1)\"\n             #codeCommentLine\n             [class.highlight]=\"lineIndex === currentLine\"\n             [attr.data-lineIndex]=\"lineIndex\"\n             [attr.data-comment]=\"codeComment?.comment\"\n             [innerHTML]=\"codeComment?.code || ''\"  \n        >\n        </div>\n    </ng-container>\n</div>\n\n<animator [newGrapher]=\"grapher\" [newSpeed]=\"slider.value\" [title]=\"currentUserFunction\"></animator>\n\n<div class=\"comment-box\">\n    {{currentComment || \"\"}}\n</div>\n\n<div id=\"player\">\n    <div>\n        <span>\n            Value (ms):&nbsp;\n        </span>\n        <span #delay>\n            {{slider.value}}\n        </span>\n        <ngx-slider #slider \n                    id=\"slider\"\n                    [value]=\"value\" \n                    [options]=\"options\">\n        </ngx-slider>\n\n        \n        <button *ngIf=\"!animationHasStarted\" \n                [disabled]=\"!config || !currentGenerator\"\n                (click)=\"startAnimation()\">\n            START\n        </button>\n\n        <div *ngIf=\"animationHasStarted\" \n             class=\"controller\" \n             (click)=\"togglePause()\">\n            <ng-container *ngIf=\"animationIsPaused; else pause\">\n                <img src=\"assets/img/play.svg\">\n            </ng-container>\n            <ng-template #pause>\n                <img src=\"assets/img/pause.svg\">\n            </ng-template>\n        </div>\n\n        <button [disabled]=\"!config\" (click)=\"setUpAnimation()\" \n        >\n            RESET\n        </button>\n    </div>\n</div>\n","import { AnimatorComponent } from \"../animator/animator.component\";\r\nimport { printRuntimeError } from \"../errorGenerator\";\r\nimport { DataStructure, NodeType, NodeValue, AnimationNode } from \"../interfaces/grapherInterfaces\";\r\n\r\n\r\nfunction getNodeFromDataStructure(dataStructure: DataStructure): NodeType {\r\n    switch(dataStructure) {\r\n        case DataStructure.BarPlot: return NodeType.Bar;\r\n        case DataStructure.List: return NodeType.Square;\r\n    }\r\n}\r\n\r\nclass Grapher {\r\n    private nodeType: NodeType;\r\n    private dataStructure: DataStructure;\r\n    private nodes: AnimationNode[];    \r\n    private lastIndex: number = 0;\r\n    private animator: AnimatorComponent;\r\n    private readonly HEX_REGEX = /^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/;\r\n    private readonly DEFAULT_HEX_COLOR = \"#135589\";\r\n    private readonly SELECTED_HEX_COLOR = \"#2277ee\";\r\n    private readonly COMPARED_HEX_COLOR = \"#f99f48\";\r\n\r\n    constructor (\r\n        nodeType?: NodeType,\r\n        dataStructure?: DataStructure,\r\n        initialValues?: NodeValue[],\r\n    ) {\r\n        this._setNodeType(nodeType);   \r\n        this._setDataStructure(dataStructure);\r\n        initialValues = initialValues || [];\r\n        this.nodes = initialValues.map(this._newNode) || [];\r\n    }\r\n\r\n    _newNode = (value: NodeValue): AnimationNode => {\r\n        return {\r\n            id: this.lastIndex++,\r\n            value: value,\r\n            height: null,\r\n            left: null,\r\n            HEXColor: this.DEFAULT_HEX_COLOR\r\n        }\r\n    }\r\n\r\n    _setAnimator(animator: AnimatorComponent) {\r\n        this.animator = animator;\r\n    }\r\n\r\n    _setNodeType(nodeType: NodeType) {\r\n        this.nodeType = nodeType;\r\n    }\r\n\r\n    getNodesType(): NodeType {\r\n        return this.nodeType;\r\n    }\r\n\r\n    getNodes(): AnimationNode[] {\r\n        return this.nodes;\r\n    }\r\n\r\n    setNodeModeSelected(index: number) {\r\n        const node = this.nodes[index];\r\n        node.HEXColor = this.SELECTED_HEX_COLOR;\r\n    }\r\n\r\n    setNodeModeCompared(index: number) {\r\n        const node = this.nodes[index];\r\n        node.HEXColor = this.COMPARED_HEX_COLOR;\r\n    }\r\n\r\n    setNodeModeNone(index: number) {\r\n        const node = this.nodes[index];\r\n        node.HEXColor = this.DEFAULT_HEX_COLOR;\r\n    }\r\n\r\n    setNodeModeCustom(index: number, HEXColor: string) {\r\n        // the HEXColor should be of the form  #ffffff\r\n        // contracted form  #fff  is also accepted.\r\n        // Notice that the hash is added if not included.\r\n        if (!HEXColor.startsWith(\"#\")) {\r\n            HEXColor = \"#\" + HEXColor; \r\n        }\r\n        if (!this.HEX_REGEX.test(HEXColor)) {\r\n            printRuntimeError(\"HEX color not valid\");\r\n        }\r\n        const node = this.nodes[index];\r\n        node.HEXColor = HEXColor;\r\n    }\r\n\r\n    _setDataStructure(dataStructure: DataStructure) {\r\n        this.dataStructure = dataStructure;\r\n    }\r\n\r\n    getDataStructure(): DataStructure {\r\n        return this.dataStructure;\r\n    }\r\n\r\n    getValues(): NodeValue[] {\r\n        return this.nodes.map(node => node.value);\r\n    }\r\n\r\n    _deleteNodeAtIndex(index: number): NodeValue {\r\n        const nodeToRemove = this.nodes.splice(index, 1)[0];\r\n        const nodeValue = nodeToRemove.value;\r\n        this.nodes.forEach((node, nodeIndex) => {\r\n            if (nodeIndex < index) {\r\n                this.animator.shiftNodeToRight(node);\r\n            } else {\r\n                this.animator.shiftNodeToLeft(node);\r\n            }\r\n        });\r\n        return nodeValue;\r\n    }\r\n\r\n    _addNodeAtIndex(index: number, value: NodeValue) {\r\n        const newNode = this._newNode(value);\r\n        this.nodes.forEach((node, nodeIndex) => {\r\n            if (nodeIndex < index) {\r\n                this.animator.shiftNodeToLeft(node);\r\n            } else {\r\n                this.animator.shiftNodeToRight(node);\r\n            }\r\n        });\r\n        this.nodes.splice(index, 0, newNode);\r\n    }\r\n\r\n    swap(index1: number, index2: number) {\r\n        [this.nodes[index1], this.nodes[index2]] = [this.nodes[index2], this.nodes[index1]];\r\n        this.refreshGraph();\r\n        [this.nodes[index1].left, this.nodes[index2].left] = [this.nodes[index2].left, this.nodes[index1].left];\r\n        this.refreshGraph(true);\r\n    }\r\n\r\n    refreshGraph(nodeWasAdded: boolean = false) {\r\n        this.animator.refreshGraph(nodeWasAdded);\r\n    }\r\n\r\n    appendValues(values: NodeValue[]) {\r\n        while(values.length > 0){\r\n            this.push(values.shift());\r\n        }\r\n    }\r\n\r\n    empty() {\r\n        while(this.nodes.length > 0){\r\n            this.pop();\r\n        }\r\n    }\r\n\r\n    push(value: NodeValue) {\r\n        this._addNodeAtIndex(this.nodes.length, value);\r\n        this.refreshGraph(true);\r\n    }\r\n\r\n    pop(): NodeValue {\r\n        const removedNodeValue = this._deleteNodeAtIndex(this.nodes.length - 1);\r\n        this.refreshGraph();\r\n        return removedNodeValue;\r\n    }\r\n\r\n    unshift(value: NodeValue) {\r\n        this._addNodeAtIndex(0, value);\r\n        this.refreshGraph(true);\r\n    }\r\n\r\n    shift(): NodeValue {\r\n        const removedNodeValue = this._deleteNodeAtIndex(0);\r\n        this.refreshGraph();\r\n        return removedNodeValue;\r\n    }\r\n\r\n    insertAt(index: number, value: NodeValue) {\r\n        this._addNodeAtIndex(index, value);\r\n        this.refreshGraph(true);\r\n    }\r\n\r\n    removeAt(index: number): NodeValue {\r\n        const removedNodeValue = this._deleteNodeAtIndex(index);\r\n        this.refreshGraph();\r\n        return removedNodeValue;\r\n    }\r\n\r\n    replaceAt(index: number, value: NodeValue): NodeValue {\r\n        const node = this.nodes[index];\r\n        const oldValue = node.value;\r\n        node.value = value;\r\n        this.refreshGraph(true);\r\n        return oldValue;\r\n    }\r\n\r\n    getErrorMessage(obj: any, enumName: string, enumList: any): string {\r\n        return `Expected object of type ${enumName}, but received ${obj}<br><br>` + \r\n               `Allowed types are: ${Object.keys(enumList).join(\", \")}`;\r\n    }\r\n\r\n    _printError(error: Error) {\r\n        // the difference between the user code, and the code\r\n        // used by the browser to generate a dynamic function\r\n        // e.g. function anonymous() { ...\r\n        const BOILER_CODE_LENGTH = 2;\r\n        const message = error.message;\r\n        // the second row of the error.stack object is the \r\n        // row specifying the specific error\r\n        const error_row = error.stack.split(\"\\n\").find(line => line.trim().startsWith(\"at eval\"));\r\n        const error_row_elements = error_row.split(\":\");\r\n        const col_error = error_row_elements.pop().slice(0, -1);\r\n        const line_error = Number(error_row_elements.pop()) - BOILER_CODE_LENGTH;\r\n        const messageHTML = `\r\n            line: ${line_error}\r\n            <br>\r\n            column: ${col_error}\r\n            <hr>\r\n            message: ${message} \r\n            <hr>\r\n            stack message: ${error.stack.split(\"\\n\").map(x => \"<br> &nbsp; \" + x)}\r\n        `;\r\n        printRuntimeError(messageHTML);\r\n    }\r\n\r\n}\r\n\r\nexport {\r\n    Grapher,\r\n    AnimationNode,\r\n    NodeType,\r\n    DataStructure,\r\n    getNodeFromDataStructure\r\n}","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n}\n","<header>\r\n    <nav>\r\n        <ul class=\"pages\">\r\n            <li><a routerLink=\"/instructions\">Instructions</a></li>\r\n            <li><a routerLink=\"/generator\">Generator</a></li>\r\n            <li><a routerLink=\"/animation\">Animation</a></li>\r\n        </ul>\r\n    </nav>\r\n</header>\r\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { CodeInputComponent } from './code-input/code-input.component';\nimport { CodeOutputComponent } from './code-output/code-output.component';\nimport { GeneratorPageComponent } from './generator-page/generator-page.component';\nimport { FormsModule } from '@angular/forms';\nimport { AnimationPageComponent } from './animation-page/animation-page.component';\nimport { InstructionsPageComponent } from './instructions-page/instructions-page.component';\nimport { CodemirrorModule } from '@ctrl/ngx-codemirror';\nimport { NgxSliderModule } from '@angular-slider/ngx-slider';\nimport { AnimatorComponent } from './animator/animator.component';\n\n \n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CodeInputComponent,\n    CodeOutputComponent,\n    GeneratorPageComponent,\n    AnimationPageComponent,\n    InstructionsPageComponent,\n    AnimatorComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    CodemirrorModule,\n    NgxSliderModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","enum NodeType {\r\n    Square = \"Square\",\r\n    Bar = \"Bar\"\r\n}\r\n\r\nenum DataStructure {\r\n    List = \"List\",\r\n    BarPlot = \"BarPlot\"\r\n}\r\n\r\ndeclare type NodeValue = number | string;\r\n\r\ninterface AnimationNode {\r\n    id: number,\r\n    value: NodeValue,\r\n    height: number,             // the height of the node\r\n    left: number,               // the distance from the left margin of the container\r\n    HEXColor: string            // the color expressed as hexadecimal value\r\n}\r\n\r\nexport {\r\n    NodeType,\r\n    AnimationNode,\r\n    NodeValue,\r\n    DataStructure\r\n}","import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Output, ViewChild } from '@angular/core';\nimport { DisplayableCodeComment, AnimationConfig } from '../interfaces/codeInterfaces';\nimport { DataStructure, getNodeFromDataStructure } from '../grapher/grapher';\n\nimport \"codemirror/addon/hint/show-hint\";\nimport \"codemirror/addon/hint/javascript-hint\";\n\nimport defaultAlertTemplate from '../../assets/templates/defaultAlertTemplate.json';\nimport { interactionError } from '../errorGenerator';\n\n@Component({\n  selector: 'code-input',\n  templateUrl: './code-input.component.html',\n  styleUrls: ['./code-input.component.scss']\n})\nexport class CodeInputComponent {\n  \n  @Output() generate = new EventEmitter<AnimationConfig>();\n  @ViewChild(\"codeEditor\") codeEditor: any;\n  @ViewChild(\"initialValues\", {read: ElementRef}) initialValuesInput: ElementRef;\n  @ViewChild(\"numericalInput\", {read: ElementRef}) numericalInput: ElementRef;\n\n  // ! Do not replace INDENT with normal space\n  readonly INDENT = \" \";\n  readonly EMPTY_CODE_COMMENT_LINES = 15;\n  readonly editorOptions = {\n    mode:  \"javascript\",\n    lineNumbers: true,\n    theme: 'material',\n    autoCloseTags: true,\n    lineWrapping: true,\n    smartIndent: true,\n    extraKeys: {'Ctrl-Space': 'autocomplete'}\n  };\n  readonly EDITOR_HEIGHT = \"450px\";\n\n  initialValuesAsString: string;\n  initialValuesIsNumerical: boolean = true;\n  dataStructureName: string = DataStructure.BarPlot;\n  displayableCodeComments: DisplayableCodeComment[];\n  editorCode: string;\n\n  constructor(private cdRef: ChangeDetectorRef) {\n    this.setUpConfig();\n  }\n\n  ngAfterViewInit() {\n    this.codeEditor.codeMirror = this.codeEditor.codeMirror;\n    this.setCodeEditorSize();\n    this.setCodeEditorIntellisense();\n  }\n\n  setCodeEditorSize() {\n    this.codeEditor.codeMirror.setSize(null, this.EDITOR_HEIGHT);\n  }\n\n  setCodeEditorIntellisense() {\n    this.codeEditor.codeMirror.on(\"keyup\", (codeMirror, _) => {\n      if (!codeMirror.state.completionActive) { \n        this.codeEditor.codeMirror.commands.autocomplete(codeMirror, null, {completeSingle: false});\n      }\n    });\n  }\n\n  setIsNumerical(isNumerical: boolean) {\n    this.initialValuesIsNumerical = isNumerical; \n    this.cdRef.detectChanges();\n  }\n\n  setDataStructure(dataStructure: string) {\n    this.dataStructureName = dataStructure;\n    this.cdRef.detectChanges();\n  }\n\n  generateEmptyCodeComment(): DisplayableCodeComment {\n    return {\n      code: \"\",\n      comment: \"\"\n    };\n  }\n\n  deleteCodeCommentLine(lineIndex: number) {\n      this.displayableCodeComments.splice(lineIndex, 1);\n  }\n\n  addCodeCommentLine(lineIndex: number = this.displayableCodeComments.length) {\n    window.event.preventDefault();\n    const nextLineIndex = lineIndex + 1\n    this.displayableCodeComments.splice(nextLineIndex, 0, this.generateEmptyCodeComment());\n    window.requestAnimationFrame(() => this.focusOnLine(nextLineIndex));\n  }\n\n  focusOnLine(lineIndex: number) {\n    (document.querySelector(`.line-code-${lineIndex}`) as HTMLElement).focus();\n  }\n\n  getCodeComments(): DisplayableCodeComment[] {\n    const codeComments = document.querySelectorAll(\"#lines-table__body .code-comment-ctn\") as any;\n    return [...codeComments].map(codeComment => {\n      return {\n        code: this.extractCodeCommentProperty(codeComment, \"code\"),\n        comment: this.extractCodeCommentProperty(codeComment, \"comment\")\n      };\n    });\n  }   \n\n  extractCodeCommentProperty(codeCommentTag: HTMLElement, elementName: string) {\n    return codeCommentTag.querySelector(`[class^=\"line-${elementName}\"]`).innerHTML;\n  }\n\n  getInitialValues(): any[] {\n    const valuesAsString = (this.initialValuesInput.nativeElement as HTMLInputElement).value;\n    let valuesAsArray: any[] = valuesAsString.split(\",\")\n                                             .map(value => value.trim());\n    if (this.initialValuesIsNumerical) {\n      valuesAsArray = valuesAsArray.map(Number);\n    }\n    return valuesAsArray || [];\n  }\n\n  getInitialValuesPlaceholder(): string {\n    return (this.initialValuesIsNumerical)\n      ? \"e.g. 1, 5, 2, 6, 8, 3\"\n      : \"e.g. these, are, 4, words\";\n  }\n\n  removeStyling(event: ClipboardEvent) {\n    // Remove styling from pasted code.\n    // This is necessary for content-editable elements\n    event.preventDefault();\n    const pastedCode = event.clipboardData.getData('text/plain');\n    document.execCommand('insertText', false, pastedCode);\n  }\n  \n  getExecutableCode(): string {\n    const editor = this.codeEditor.codeMirror;\n    const rawExecutableCode = editor.getValue();\n    const executableCode = rawExecutableCode;\n    return executableCode;\n  }\n\n  getConfig(): AnimationConfig {\n    const executable = this.getExecutableCode();\n    const displayableCodeComments = this.getCodeComments();\n    const initialValues = this.getInitialValues();\n    const dataStructure = DataStructure[this.dataStructureName];\n    const nodeType = getNodeFromDataStructure(dataStructure);\n    const config: AnimationConfig = {\n      executable,\n      displayableCodeComments,\n      initialValues,\n      dataStructure,\n      nodeType\n    };\n    return config;\n  }\n\n  generateAnimation() {\n    const config = this.getConfig();\n    this.generate.emit(config);\n  }\n\n  downloadConfig() {\n    const config = this.getConfig();\n    const a = document.createElement(\"a\");\n    const file = new Blob([JSON.stringify(config)], { type: \"text/json\" });\n    a.href = URL.createObjectURL(file);\n    a.download = \"grapher_config.json\";\n    a.click();\n  }\n\n  setUpConfig(config: AnimationConfig = defaultAlertTemplate) {\n    this.editorCode = config.executable\n    this.displayableCodeComments = config.displayableCodeComments;  \n    this.initialValuesAsString = config.initialValues.join(\", \"); \n  }\n\n  loadConfig(event: Event) {\n    const loadableFile = (event.target as HTMLInputElement).files[0];\n    const fileReader = new FileReader();\n    fileReader.onload = fileLoadedEvent => {\n      const configFile = fileLoadedEvent.target.result as string;\n      try {\n        this.setUpConfig(JSON.parse(configFile));\n      } catch {\n        interactionError(\"The file is not valid\");\n      }\n    };\n    fileReader.readAsText(loadableFile, \"UTF-8\");\n  }\n}\n\n","<div class=\"code\">\n\n    <!-- Monaco Code Editor -->\n    <ngx-codemirror\n        #codeEditor\n        id=\"codeEditor\"\n        [(ngModel)]=\"editorCode\"\n        [options]=\"editorOptions\"\n    >\n    </ngx-codemirror>\n    \n    <!-- Code to be displayed -->\n    <div id=\"display-code\">\n        <div id=\"lines-table\">\n            \n            <div id=\"lines-table__head\">\n                <div class=\"raw-line\">\n                    <div class=\"head-counter\">#</div>\n                    <div class=\"code-comment-ctn\">\n                        <div class=\"line-code\">Code</div>\n                        <div class=\"line-comment\">Comment</div>\n                    </div>\n                </div>\n            </div>\n            \n            <div id=\"lines-table__body\" #codeCommentBlock>\n                <div class=\"raw-line\" *ngFor=\"let codeComment of displayableCodeComments; let lineIndex=index\">\n                    <div class=\"counter\">{{lineIndex}}</div>\n                    <div class=\"code-comment-ctn\">\n                        <div class=\"line-code-{{lineIndex}}\" contenteditable \n                            (paste)=\"removeStyling($event)\"\n                            (keydown.enter)=\"addCodeCommentLine(lineIndex)\"\n                            [innerHTML]=\"codeComment.code\"\n                        >\n                        </div>\n                        <div class=\"line-comment\" contenteditable\n                            (paste)=\"removeStyling($event)\"\n                            [innerHTML]=\"codeComment.comment\"\n                        >\n                        </div>\n                    </div>\n                    <div class=\"bin\" (click)=\"deleteCodeCommentLine(lineIndex)\">\n                        <img src=\"assets/img/red_bin.png\">\n                    </div>\n                </div>\n            </div>\n\n            <div id=\"lines-table__btn\">\n                <button (click)=\"addCodeCommentLine()\">New Line</button> \n                <button id=\"display-code__btn\" \n                        (click)=\"generateAnimation()\"\n                >\n                    Generate Animation\n                </button>\n            </div>\n        </div>       \n    </div>\n</div>\n<div class=\"config-btn\">\n        <select id=\"data-structure\" \n                #dataStructure\n                (change)=\"setDataStructure(dataStructure.value)\">\n            <option selected>\n                BarPlot\n            </option>\n            <option>\n                List\n            </option>\n        </select>\n    <div>\n        <label for=\"initial-values\">Initial Values:</label>\n        <input id=\"initial-values\" \n               #initialValues\n               type=\"text\" \n               [placeholder]=\"getInitialValuesPlaceholder()\"\n               [value]=\"initialValuesAsString\"\n        >\n        <label for=\"is-numerical\" \n               [hidden]=\"dataStructure.value == 'BarPlot'\"\n        >\n            Numerical Values</label>\n        <input id=\"is-numerical\" \n               #isNumerical \n               type=\"checkbox\" \n               (click)=\"setIsNumerical(isNumerical.checked)\"\n               [hidden]=\"dataStructure.value == 'BarPlot'\"\n        >\n    </div>\n    <button (click)=\"downloadConfig()\">Save Configuration</button>\n    <button (click)=\"configLoader.click()\">Load Configuration</button>\n    <input #configLoader (change)=\"loadConfig($event)\" type=\"file\" hidden>\n</div>","interface DynamicFunction {\r\n    name: string,\r\n    body: GeneratorFunction,\r\n    params?: [\r\n        {\r\n            name: string,\r\n            type: InputType\r\n        }\r\n    ],\r\n    lines?: LinesSelection\r\n}\r\n\r\ninterface LinesSelection {\r\n    start: number,\r\n    end: number\r\n}\r\n\r\nenum InputType {\r\n    Number = \"number\",\r\n    NumberList = \"numberList\",\r\n    String = \"string\",\r\n    StringList = \"stringList\"\r\n}\r\n\r\nconst REGEXES = {\r\n    NUMERICAL_SERIES: /^[\\-]{0,1}\\d+(\\.\\d+){0,1}(\\s*\\,\\s*[\\-]{0,1}\\d+(\\.\\d+){0,1})*\\s*$/,\r\n    NUMERICAL: /^[\\-]{0,1}\\d*(\\.\\d+)*$/,\r\n    ANY: /\\./\r\n}\r\n\r\nexport {\r\n    DynamicFunction,\r\n    LinesSelection,\r\n    InputType,\r\n    REGEXES\r\n}","import { Component } from '@angular/core';\nimport { AnimationConfig } from '../interfaces/codeInterfaces';\nimport * as templateRaw from '../../assets/templates.json';\nimport queue from '../../assets/templates/queue.json';\nimport bubbleSort from '../../assets/templates/bubbleSort.json';\nimport { interactionError } from '../errorGenerator';\n\n@Component({\n  templateUrl: './animation-page.component.html',\n  styleUrls: ['./animation-page.component.scss']\n})\nexport class AnimationPageComponent {\n\n  config: AnimationConfig;\n  templateOptions: JSON;\n  readonly TEMPLATES_PATH = \"../../assets/templates/\";\n  readonly QUEUE_TEMPLATE = queue;\n  readonly BUBBLE_SORT_TEMPLATE = bubbleSort;\n\n  constructor() { \n    this.templateOptions = templateRaw.default; \n  }\n\n  loadConfig(event: Event) {    \n    const loadableFile = (event.target as HTMLInputElement).files[0];\n    const fileReader = new FileReader();\n    fileReader.onload = fileLoadedEvent => {\n      const configFile = fileLoadedEvent.target.result as string;\n      try {\n        this.config = JSON.parse(configFile);\n      } catch {\n        interactionError(\"The file is not valid\");\n      }\n    };\n    fileReader.readAsText(loadableFile, \"UTF-8\");\n  }\n\n  loadTemplateConfig(template: string) {\n    switch(template) {\n      case \"queue\":\n        this.config = this.QUEUE_TEMPLATE;\n        break;\n\n      case \"bubbleSort\":\n        this.config = this.BUBBLE_SORT_TEMPLATE;\n        break;\n    }\n  }\n}\n","<h1>Welcome to the Animation Page!</h1>\r\n\r\n<hr>\r\n\r\n<div class=\"config-ctn\">\r\n    <label for=\"input\">Import Configuration: &nbsp;</label>\r\n    <input id=\"input\" type=\"file\" (change)=\"loadConfig($event)\" accept=\".json\">\r\n    <hr>\r\n    <label for=\"template\">Or choose an existing one: &nbsp;</label>\r\n    \r\n    <select #template id=\"template\">\r\n        <optgroup  *ngFor=\"let templateOption of templateOptions | keyvalue\" \r\n                    [label]=\"templateOption.key | titlecase\"\r\n        >\r\n            <option *ngFor=\"let algorithm of templateOption.value | keyvalue\" \r\n                    [value]=\"algorithm.value\"\r\n            >\r\n                    {{algorithm.key}}\r\n            </option>\r\n        </optgroup>\r\n    </select>\r\n    <button class=\"confirm-btn\" (click)=\"loadTemplateConfig(template.value)\">\r\n        Confirm\r\n    </button>\r\n</div>\r\n\r\n\r\n<code-output *ngIf=\"config\" [newConfig]=\"config\"></code-output>","import { Component } from '@angular/core';\nimport { AnimationConfig } from '../interfaces/codeInterfaces';\n\n@Component({\n  selector: 'generator-page',\n  templateUrl: './generator-page.component.html',\n  styleUrls: ['./generator-page.component.scss']\n})\nexport class GeneratorPageComponent{\n\n  config: AnimationConfig;\n\n  renderCode(config: AnimationConfig) {\n    this.config = config;\n  }\n}\n","<h1>Welcome to the Generator Page!</h1>\n\n<code-input (generate)=\"renderCode($event)\"></code-input>\n<code-output [newConfig]=\"config\"></code-output> ","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AnimationPageComponent } from './animation-page/animation-page.component';\nimport { GeneratorPageComponent } from './generator-page/generator-page.component';\nimport { InstructionsPageComponent } from './instructions-page/instructions-page.component';\n\nconst routes: Routes = [\n  {path: 'instructions', component: InstructionsPageComponent },\n  {path: 'generator', component: GeneratorPageComponent },\n  {path: 'animation', component: AnimationPageComponent },\n  {path: '', redirectTo: '/instructions', pathMatch: 'full' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes,{useHash:true})],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  templateUrl: './instructions-page.component.html',\n  styleUrls: ['./instructions-page.component.scss']\n})\nexport class InstructionsPageComponent {\n\n  constructor() { }\n\n}\n","<h1>Welcome to the Instructions Page!</h1>\n\n<div class=\"accordion-container\">\n    <details>\n        <summary>\n            <h4>What is Grapher.js</h4>\n        </summary>\n        <div>\n            Grapher.js is a website designed to help students \n            learn data structures and algorithms via interactive\n            function calls and beautiful animations.\n        </div>\n    </details>\n\n    <details>\n        <summary>\n            <h4>Instructions for students</h4>\n        </summary>\n        <div>\n            Your teacher should have provided you with a configuration file in format JSON.\n            That file should be used in the <u><b><a routerLink=\"../animation\">Animation Page</a></b></u> to generate the animation.\n            <br>\n            <br>\n            To load a configuration you just need to click on the button <i>Choose File</i> and select the file provided to you by your teacher.\n            Once the configuration is loaded and accepted by the software, the animation will automatically appear on your screen.\n            <br>\n            <br>\n            If your teacher did not provide any files, you can play around with one of those pre-built into Grapher.js. \n            Again, go the <u><b><a routerLink=\"../animation\">Animation Page</a></b></u>, but this time select a file from the drop-down menu.\n            When you have chose the animation, click the button <i>Confirm</i> and the animation will appear. \n            <br>\n            <br>\n            To interact with the animation, move to the next section <b>Understanding the components</b> which explains what each component does.\n        </div>\n    </details>\n\n    <details>\n        <summary>\n            <h4>Understanding the components</h4>\n        </summary>\n        <div>\n            Once the animation has been loaded successfully, you should see something similar to this\n            \n            <img src=\"assets/img/App View.jpg.png\">\n\n            Two elements are fundamental to understand. The element with the label <b>1</b> is the bar with the\n            methods that you can call to interact with the animation. Some may need you to pass some parameters,\n            such as <i>Enqueue</i>. For these types of methods the input shall be valid in order for the method \n            to be callable. All the other methods may be called straight away.\n            <br>\n            <br>\n            Once you call a method, this will not start immediately, instead it will be loaded and will start\n            only when you press the button <i>START</i> in the control panel (the element with label <b>2</b>).\n            <br>\n            <br>\n            In the control panel you are provided the buttons to start, stop, and resume the animation. Notice\n            that the button <i>RESET</i> does not replay the last method called, rather, it resets the all animation\n            to the state it was when it was loaded.\n            Within the control panel you also have a slider which controls the speed of the animation. The value \n            of the slider denotes the delay between one animation step and the next one. To obtain a lower value \n            you should drag the cursor to the left. Vice versa, dragging it to the right will slow down the animation.\n            <br>\n            <br>\n            The animation takes place in the box located right above the control panel. Although it is not possible\n            to directly interact with the animation (the only way is calling methods and using the elements in the\n            control panel), the content of the animation can be zoomed in or out using the mouse wheel. Also,\n            the animation can be moved by dragging it.\n            <br>\n            <br>                \n            On the left of the animation box is where the code for the animation will be displayed. The currently \n            executed line of will be highlighted to easily find it.\n            <br>\n            <br>\n            Finally, the comments will appear below the code, inside that dark blue box. \n        </div>\n    </details>\n\n    <details>\n        <summary>\n            <h4>Instructions for teachers</h4>\n        </summary>\n        <div>\n            The generator page is partly similar to the animation page. However, the component to select the \n            configuration is replaced by a more complex component, namely, the teacher component.\n            This component should be used to create models in all their aspects.\n    \n            The following figure shows its components.\n            <br>\n            <br>\n            <img src=\"assets/img/teacherComponent.png\">\n    \n            Component <b>A</b> is a text editor that should be used to define the behaviour of the algorithms and how the \n            respective animations should update.\n            The language to use for this section is Javascript.\n            Component <b>B</b> is the code-comment container.\n            It includes several lines, each made up of a portion of displayable code and a static comment.\n            Each line is indexed by a number located on the left-hand side of the code section under the column \n            label with a hash symbol (<b>#</b>).\n    \n            At the bottom of the teacher component, there is a horizontal bar.\n            The elements of this bar, in order, allow to:\n            <ul>\n                <li> Select the type of data structure to use. </li>\n                <li> Select initial values that the model should start with and the animator should \n                    immediately render these values. </li>\n                <li> Save the current model defined in the teacher section and export it as a configuration file.</li>\n                <li> Load a model to modify it by selecting an existing configuration.</li>\n            </ul>\n    \n            Before saving the model and export it, it is possible to see how its animations would appear on the animation page. \n            To do so, it is necessary to click the button '<b>Generate Animation</b>' at the bottom of the code-comment container.\n            The model will then be loaded in the bottom half of the screen simulating the behaviour of the animation page.\n    \n            <br><br>\n            To create a model, it is important to define its elements. In the code-comment container, it is possible to define the \n            displayable code and the comments that should be displayed during an animation.\n            As this code is not actually run, it can be written using any languages, may that be Python, Haskell, \n            or even pseudocode.<br><br>\n            If the lines to write displayable code and comments terminate, it is enough to click on the \n            '<b>new line</b>' button to generate more. Vice versa, clicking the bin image on the \n            right-hand side a line deletes the latter.\n    \n            <br><br>\n\n            <img src=\"assets/img/yield.jpg\" class=\"float-l l\">\n            Inside the text editor, Javascript should be used to model the animations.\n            This Javascript code will also be referred to as animation code.\n            In the animation code, the methods that describe the algorithms (and the respective animations) should be defined.\n            Note that these methods must be generator functions in order to work properly. <br><br>\n            Algorithms, in fact, should be a sequence of well-defined steps and, using the 'yield' keyword, \n            it is possible to delimit these steps. \n            An example for this is:\n            <br><br>\n            <br><br>\n    \n    \n            <img src=\"assets/img/yield2.jpg\" class=\"float-l l\">\n            The yield construct allows to return some data.\n            In the animation code, that data should be used to tell the software what line of \n            displayable code (as defined in the code-comment container) should be highlighted and what comment should be displayed at each step.\n            The yield construct should return either a number, which is simply the index of such a line, or a JSON.<br><br>\n            Using the JSON notation, the construct can specify the line of displayable to highlight as well as a comment \n            (generated at runtime) that overrides the static comment defined in the code-comment container for that line.\n            Following is an example:\n            <br><br>\n    \n            \n            <br><br>\n            The generator functions that describe the steps for an algorithm should also be used to create the animations. \n            Suppose that the Javascript code should model a queue data structure.\n            That model should contain some data (i.e. the elements stored in the queue) that Grapher.js should graphically render.\n            To be precise, the graphical representation of each element stored in the queue is called 'node'.<br><br>\n            To visually simulate an algorithm, each generator function should tell Grapher.js how to manipulate these nodes at every \n            step of the algorithm that such a function represents.\n            This can be easily done using the 'grapher' object which can be called from the Javascript code.\n            <br><br>\n            The grapher object is what contains the data of the model (the queue in the previous example).\n            Interacting with it, it is possible to read and alter this data.<br><br>\n            The grapher object should detect the changes on this data and communicates it to the animator which updates the nodes correctly.\n            To guarantee that the grapher object detects these changes, it is important to manipulate the data it stores using the exposed methods.\n            The full list of methods exposed by the grapher instance is listed at the bottom.\n    \n    \n            An example of possible animation code for the 'dequeue' method of a queue model is reported as follows. \n            That code refers to the code-comment container in adjacent figure.\n    \n            <br>\n            <div class=\"img-ctn\">\n                <img src=\"assets/img/deuque.jpg\">\n                <img src=\"assets/img/DEUQUEc.jpg\">\n            </div>\n    \n    \n            <br>\n            <br>\n            Each generator function defined in the text editor has access to a grapher object which should be used to manipulate graphical nodes to simulate animations.\n            This object exposes the following methods:\n            <br>\n            <img src=\"assets/img/grapher.png\" class=\"center\">\n        </div>\n    </details>\n</div>","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/markdown/markdown';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}