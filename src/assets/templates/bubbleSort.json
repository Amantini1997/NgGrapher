{"executable":"return [\n    {\n        name: \"initial values\",\n        body: setInitialValues,\n        params: [\n            {\n                name: \"e.g. 1, 5, 2, -2\",\n                type: \"numberList\"\n            }\n        ]\n    },\n    {\n        name: \"sort\",\n        body: sort,\n        params: [],\n        lines: {\n            start: 0,\n            end: 9\n        }\n    }\n]; \n  \n\nfunction * setInitialValues(values) {\n    grapher.empty();\n  \tgrapher.appendValues(values);\n}\n\n\nfunction * sort() {\n    let inputArr = grapher.getValues();\n    let len = inputArr.length;\n\n    for (let i = 0; i < len; i++) {\n        yield {\n            line: 0,\n            comment: (i < len) \n                ? i + \" < \" + len + \", so we stay in the loop\"\n                : i + \" is = to \" + len + \", so we exit the loop\"\n        }\n        \n        for (let j = 0; j < len - 1 - i; j++) {\n            grapher.setNodeModeSelected(j);\n\n            yield {\n                line: 1,\n                comment: (j < len-1) \n                    ? j + \" < \" + len + \", so we stay in the loop\"\n                    : j+ \" is = to \" + len + \", so we exit the loop\"\n            }\n            \n            grapher.setNodeModeCompared(j + 1);\n            if (inputArr[j] > inputArr[j + 1]) {\n                yield {\n                    line: 2,\n                    comment: inputArr[j] + \" > \" + inputArr[j + 1]\n                }\n                \n                let tmp = inputArr[j];\n                yield 3            \n                \n                inputArr[j] = inputArr[j + 1];\n                yield 4\n                \n                inputArr[j + 1] = tmp;\n                grapher.swap(j, j+1);\n                yield 5\n            } else {\n                yield {\n                    line: 2,\n                    comment: inputArr[j] + \" and \" + inputArr[j + 1] + \" are already sorted\"\n                }\n            }\n            grapher.setNodeModeNone(j + 1);\n            grapher.setNodeModeNone(j);\n        }\n    }\n    yield 9\n}","displayableCodeComments":[{"code":"for (let i = 0; i &lt; len; i++) {","comment":"Checking index i is in range"},{"code":"  for (let j = 0; j &lt; len - 1 - i; j++) {","comment":"Checking index j is in range"},{"code":"    if (inputArr[j] &gt; inputArr[j + 1]) {","comment":"Checking if the element at index j + 1 is bigger than the element at index j"},{"code":"      let tmp = inputArr[j];","comment":"Swap variables"},{"code":"      inputArr[j] = inputArr[j + 1];","comment":"Swap variables"},{"code":"      inputArr[j + 1] = tmp;","comment":"Swap variables"},{"code":"    }","comment":""},{"code":"  }","comment":""},{"code":"}","comment":""},{"code":"","comment":"Array sorted"},{"code":"","comment":""}],"initialValues":[1,6,3,34,5],"dataStructure":"BarPlot","nodeType":"Bar"}