{"executable":"/** \n*  Use this space to write the logic of the program, i.e. the javascript function \n*  that operates the algorithm. Use the \"yield\" keyword to tell the program \n*  which line to highlight at each stage.\n* e.g.\n*      yield 0 \n*\n*  This will highlight the 0th line (remember the program uses the array notation,\n*  so the first element is the element at position 0. In general, the code-comment \n*  editor labels each line number).\n* \n*  It is possible to return dynamic comments, for example if a the comment\n*  depends on the value of a variable. In such case use the keyword yield to return\n*  a JSON object of the form:\n*  yield {\n*      line: 0,\n*      comment: \"checking if element \" + x + \" >= \" + y\n*  }\n* \n* Remember to include the return array of the functions \n* that the user can interact with.\n*/ \n\n\n// highlight the function call\nreturn [\n  {\n    name: \"alert\",\n    body: alerting,\n    params: [\n      {\n        name: \"message to alert\",\n        type: \"string\"\n      }\n    ],\n    lines: {\n      start: 0,\n      end: 2\n    }\n  }\n]; \n\nfunction * alerting(message) {\n  yield 0\n\n  // highlight the alert()\n  yield {\n      line: 1, \n      comment: \"alerting message '\" + message + \"'\"\n  } \n  alert(message);\n\n  // highlight the end of the function\n  yield 2\n}\n","displayableCodeComments":[{"code":"function alert(message)","comment":""},{"code":"â€ƒalert(message);","comment":""},{"code":"}","comment":""},{"code":"","comment":""},{"code":"","comment":""},{"code":"","comment":""},{"code":"","comment":""},{"code":"","comment":""},{"code":"","comment":""},{"code":"","comment":""},{"code":"","comment":""},{"code":"","comment":""},{"code":"","comment":""},{"code":"","comment":""},{"code":"","comment":""},{"code":"","comment":""},{"code":"","comment":""},{"code":"","comment":""}],"initialValues": [],"dataStructure":"BarPlot","nodeType":"Bar"}