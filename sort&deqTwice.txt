return [
    {
        name: "sort",
	body: sort,
        params: [
            {
                name: "position",
                type: "number"
            }
        ],
        lines: {
            start: 0,
            end: 9
        }
    }, 
    {
        name: "deq2",
	body: deqTwice,
        params: [
		name: "pop",
		type: "number"
	],
        lines: {
            start: 0,
            end: 8
        }
    }
]

function * deqTwice() {
yield 1
	grapher.shift()
yield 2
	grapher.shift()
yield 1
}

function * sort()
{
    let inputArr = grapher.getValues();

    let len = inputArr.length;

    for (let i = 0; i < len; i++) {
        yield {
        line: 0,
        comment: (i < len) 
                            ? i + " < " + len + ", so we stay in the loop"
                            : i + " is = to " + len + ", so we exit the loop"
        }
        
        for (let j = 0; j < len - 1 - i; j++) {
            grapher.setNodeModeSelected(j);
            yield {
            line: 1,
            comment: (j < len-1) 
                            ? j + " < " + len + ", so we stay in the loop"
                            : j+ " is = to " + len + ", so we exit the loop"
            }
            
            grapher.setNodeModeCompared(j + 1);
            if (inputArr[j] > inputArr[j + 1]) {
                yield {
                    line: 2,
                    comment: inputArr[j] + " > " + inputArr[j + 1]
                }
            
                let tmp = inputArr[j];
                yield 3
                
                inputArr[j] = inputArr[j + 1];
                yield 4
                
                inputArr[j + 1] = tmp;
                grapher.swap(j, j+1);
                yield 5
            } else {
                yield {
                    line: 2,
                    comment: inputArr[j] + " and " + inputArr[j + 1] + " are alredy sorted"
                }
            }
            grapher.setNodeModeNone(j + 1);
            grapher.setNodeModeNone(j);
        }
    }
    yield 9
}